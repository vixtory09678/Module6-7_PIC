CCS PCD C Compiler, Version 5.015, 5967               25-Nov-18 08:17

               Filename:   E:\Work\FIBO\3term1\module67\PICModule\main.lst

               ROM used:   6798 bytes (20%)
                           Largest free fragment is 23918
               RAM used:   395 (5%) at main() level
                           525 (6%) worst case
               Stack size: 128

*
0C00:  GOTO    1FCE
*
0C24:  GOTO    E30
*
0C30:  GOTO    148E
*
0C44:  GOTO    14E2
*
0C50:  GOTO    E86
*
0C74:  GOTO    DFC
.................... /* 
....................     robotics-za.blogspot.com 
....................     https://github.com/vixtory09678/Common_PIC 
.................... */ 
.................... // local path 
.................... #include "lib/24FJ48GA002.h" 
.................... //////////// Standard Header file for the PIC24FJ48GA002 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC24FJ48GA002 
*
0EE2:  MOV     W5,[W15++]
0EE4:  MOV     W6,[W15++]
0EE6:  MOV     #8E,W1
0EE8:  BCLR    W6.0
0EEA:  BTSS    W0.F
0EEC:  BRA     EF4
0EEE:  BSET    W6.0
0EF0:  NEG     W0,W0
0EF2:  BRA     EF4
0EF4:  CP0     W0
0EF6:  BRA     Z,F20
0EF8:  BTSC    W0.F
0EFA:  BRA     F04
0EFC:  BCLR.B  42.0
0EFE:  RLC     W0,W0
0F00:  DEC     W1,W1
0F02:  BRA     EF8
0F04:  SWAP    W1
0F06:  BCLR.B  42.0
0F08:  RRC     W1,W1
0F0A:  BCLR    W0.F
0F0C:  SWAP    W0
0F0E:  XOR.B   W0L,W1L,W1L
0F10:  AND.B   #0,W0L
0F12:  BTSC    W6.0
0F14:  BSET    W1.F
0F16:  BRA     F26
0F18:  MOV.B   W1L,W0L
0F1A:  BSET    W1.7
0F1C:  AND.B   #0,W1L
0F1E:  BRA     F26
0F20:  CLR     W0
0F22:  CLR     W1
0F24:  BRA     F26
0F26:  MOV     [--W15],W6
0F28:  MOV     [--W15],W5
0F2A:  RETURN  
0F2C:  MOV     W5,[W15++]
0F2E:  MOV     #C,W5
0F30:  REPEAT  #4
0F32:  MOV     [W5++],[W15++]
0F34:  CLR     W9
0F36:  XOR     W1,W3,W9
0F38:  MOV     W1,W6
0F3A:  MOV     W0,W5
0F3C:  MOV     W3,W8
0F3E:  MOV     W2,W7
0F40:  RLC     W1,W1
0F42:  SWAP    W1
0F44:  ZE      W1,W1
0F46:  CP0     W1
0F48:  BRA     Z,FE6
0F4A:  RLC     W3,W3
0F4C:  SWAP    W3
0F4E:  ZE      W3,W3
0F50:  CP0     W3
0F52:  BRA     Z,FE6
0F54:  CLR     W0
0F56:  SUB.B   W1L,W3L,W0L
0F58:  BRA     NC,F60
0F5A:  ADD.B   #7F,W0L
0F5C:  BRA     C,FE6
0F5E:  BRA     F66
0F60:  SUB.B   #81,W0L
0F62:  BRA     NC,FE6
0F64:  BRA     Z,FE6
0F66:  MOV     W5,W1
0F68:  MOV     W6,W2
0F6A:  BSET    W2.7
0F6C:  AND     #FF,W2
0F6E:  AND     #FF,W8
0F70:  BSET    W8.7
0F72:  MOV     #19,W10
0F74:  CLR     W3
0F76:  CLR     W4
0F78:  SUB     W1,W7,W1
0F7A:  SUBB    W2,W8,W2
0F7C:  BRA     N,F82
0F7E:  BRA     C,F88
0F80:  BRA     NZ,F8A
0F82:  ADD     W1,W7,W1
0F84:  ADDC    W2,W8,W2
0F86:  BRA     F8A
0F88:  BSET    W4.0
0F8A:  DEC     W10,W10
0F8C:  BRA     Z,F9C
0F8E:  BCLR.B  42.0
0F90:  RLC     W1,W1
0F92:  RLC     W2,W2
0F94:  BCLR.B  42.0
0F96:  RLC     W4,W4
0F98:  RLC     W3,W3
0F9A:  BRA     F78
0F9C:  CLR     W10
0F9E:  BTSC    W3.8
0FA0:  BRA     FA4
0FA2:  BRA     FB0
0FA4:  BCLR.B  42.0
0FA6:  RRC     W3,W3
0FA8:  BCLR    W3.7
0FAA:  RRC     W4,W4
0FAC:  RLC     W10,W10
0FAE:  BRA     FB4
0FB0:  DEC     W0,W0
0FB2:  BRA     Z,FE6
0FB4:  BTSC    W10.F
0FB6:  BRA     NC,FC2
0FB8:  RLC     W1,W1
0FBA:  RLC     W2,W2
0FBC:  SUB     W1,W7,W1
0FBE:  SUBB    W2,W8,W2
0FC0:  BRA     NC,FD4
0FC2:  INC     W4,W4
0FC4:  BRA     NZ,FD4
0FC6:  INC     W3,W3
0FC8:  BRA     NZ,FD4
0FCA:  INC     W0,W0
0FCC:  BRA     Z,FE6
0FCE:  BRA     FD4
0FD0:  DEC     W0,W0
0FD2:  BRA     Z,FE6
0FD4:  SWAP    W0
0FD6:  RRC     W0,W1
0FD8:  BSET    W1.F
0FDA:  BTSS    W9.F
0FDC:  BCLR    W1.F
0FDE:  BCLR    W3.7
0FE0:  XOR.B   W3L,W1L,W1L
0FE2:  MOV     W4,W0
0FE4:  BRA     FEC
0FE6:  MOV     #0,W0
0FE8:  MOV     #0,W1
0FEA:  BRA     FEC
0FEC:  MOV     #14,W5
0FEE:  REPEAT  #4
0FF0:  MOV     [--W15],[W5--]
0FF2:  MOV     [--W15],W5
0FF4:  RETURN  
0FF6:  MOV     W5,[W15++]
0FF8:  MOV     #C,W5
0FFA:  REPEAT  #4
0FFC:  MOV     [W5++],[W15++]
0FFE:  MOV     W0,W4
1000:  MOV     W1,W5
1002:  MOV     W3,W7
1004:  MOV     W2,W6
1006:  BCLR.B  42.0
1008:  BCLR.B  42.1
100A:  RLC     W1,W1
100C:  SWAP    W1
100E:  AND     #FF,W1
1010:  CP0     W1
1012:  BRA     Z,10AA
1014:  BCLR.B  42.0
1016:  BCLR.B  42.1
1018:  RLC     W3,W3
101A:  SWAP    W3
101C:  AND     #FF,W3
101E:  CP0     W3
1020:  BRA     Z,10AA
1022:  ZE      W0,W0
1024:  ADD.B   W3L,W1L,W0L
1026:  BRA     C,1030
1028:  SUB     #7F,W0
102A:  BRA     Z,10AA
102C:  BRA     NC,10AA
102E:  BRA     1034
1030:  ADD.B   #81,W0L
1032:  BRA     C,10AA
1034:  XOR     W5,W7,W10
1036:  BCLR.B  42.0
1038:  BCLR.B  42.1
103A:  AND     #FF,W5
103C:  BSET    W5.7
103E:  BCLR.B  42.0
1040:  AND     #FF,W7
1042:  BSET    W7.7
1044:  MUL.UU  W4,W6,W2
1046:  MUL.UU  W5,W6,W8
1048:  ADDC    W8,W3,W3
104A:  MOV     W9,W1
104C:  BTSC.B  42.0
104E:  INC     W1,W1
1050:  BCLR.B  42.0
1052:  MUL.UU  W7,W4,W8
1054:  ADDC    W8,W3,W3
1056:  ADDC    W9,W1,W1
1058:  MUL.UU  W5,W7,W8
105A:  ADDC    W8,W1,W1
105C:  INC     W0,W0
105E:  CP0     W1
1060:  BTSC.B  42.1
1062:  BRA     1066
1064:  BRA     106C
1066:  CP0     W3
1068:  BTSC.B  42.1
106A:  BRA     1076
106C:  BTSC    W1.F
106E:  BRA     1076
1070:  RLC     W3,W3
1072:  RLC     W1,W1
1074:  DEC     W0,W0
1076:  MOV     W1,W2
1078:  BCLR.B  42.0
107A:  BTSS    W3.7
107C:  BRA     1090
107E:  MOV     #FF00,W7
1080:  AND     W3,W7,W3
1082:  ADD     #100,W3
1084:  ADDC    W2,#0,W2
1086:  CP0     W2
1088:  BRA     NZ,1090
108A:  CP0     W3
108C:  BRA     NZ,1090
108E:  INC     W0,W0
1090:  SWAP    W0
1092:  BCLR.B  42.0
1094:  BCLR.B  42.1
1096:  RRC     W0,W1
1098:  BTSC    W10.F
109A:  BSET    W1.F
109C:  BCLR    W2.F
109E:  SWAP    W2
10A0:  XOR.B   W2L,W1L,W1L
10A2:  SWAP    W3
10A4:  MOV.B   W3L,W2L
10A6:  MOV     W2,W0
10A8:  BRA     10B0
10AA:  MOV     #0,W0
10AC:  MOV     #0,W1
10AE:  BRA     10B0
10B0:  MOV     #14,W5
10B2:  REPEAT  #4
10B4:  MOV     [--W15],[W5--]
10B6:  MOV     [--W15],W5
10B8:  RETURN  
10BA:  MOV     W5,[W15++]
10BC:  MOV     W2,W3
10BE:  MOV     W2,W5
10C0:  BCLR.B  42.0
10C2:  RLC     W3,W3
10C4:  SWAP    W3
10C6:  AND     #FF,W3
10C8:  BRA     NZ,10D0
10CA:  MUL.UU  W0,#0,W0
10CC:  MUL.UU  W2,#0,W2
10CE:  BRA     10FC
10D0:  ADD     #380,W3
10D2:  AND     #7F,W2
10D4:  MOV     #3,W6
10D6:  CLR     W4
10D8:  BCLR.B  42.0
10DA:  RRC     W2,W2
10DC:  RRC     W1,W1
10DE:  RRC     W0,W0
10E0:  BTSC.B  42.0
10E2:  INC     W4,W4
10E4:  DEC     W6,W6
10E6:  BRA     NZ,10D8
10E8:  BCLR    W2.7
10EA:  SL      W3,#4,W3
10EC:  BCLR    W3.F
10EE:  BTSC    W5.F
10F0:  BSET    W3.F
10F2:  XOR     W2,W3,W3
10F4:  MOV     W1,W2
10F6:  MOV     W0,W1
10F8:  ADD     W4,W1,W1
10FA:  CLR     W0
10FC:  MOV     [--W15],W5
10FE:  RETURN  
*
114A:  MOV     W5,[W15++]
114C:  MOV     W6,[W15++]
114E:  MOV     W3,W4
1150:  MOV     W3,W6
1152:  BCLR.B  42.0
1154:  ASR     W4,#4,W4
1156:  MOV     #7FF,W5
1158:  AND     W5,W4,W4
115A:  BRA     NZ,1162
115C:  MUL.UU  W0,#0,W0
115E:  CLR     W2
1160:  BRA     1188
1162:  SUB     #380,W4
1164:  AND     #F,W3
1166:  MOV     #3,W7
1168:  BCLR.B  42.0
116A:  RLC     W0,W0
116C:  RLC     W1,W1
116E:  RLC     W2,W2
1170:  RLC     W3,W3
1172:  DEC     W7,W7
1174:  BRA     NZ,1168
1176:  MOV     W1,W0
1178:  MOV     W2,W1
117A:  BCLR    W3.7
117C:  SWAP    W4
117E:  BCLR.B  42.0
1180:  RRC     W4,W4
1182:  BTSC    W6.F
1184:  BSET    W4.F
1186:  XOR     W4,W3,W2
1188:  MOV     [--W15],W6
118A:  MOV     [--W15],W5
118C:  RETURN  
118E:  MOV     W5,[W15++]
1190:  MOV     #C,W5
1192:  REPEAT  #3
1194:  MOV     [W5++],[W15++]
1196:  CLR     W9
1198:  MOV     #8000,W8
119A:  BTSC.B  43.0
119C:  XOR     W8,W3,W3
119E:  CP0     W0
11A0:  BRA     NZ,11A8
11A2:  MOV     #7FFF,W10
11A4:  AND     W1,W10,W10
11A6:  BTSS.B  42.1
11A8:  MOV     W1,W10
11AA:  XOR     W3,W10,W11
11AC:  MOV     W1,W6
11AE:  MOV     W3,W7
11B0:  MOV     W3,W12
11B2:  BCLR.B  42.1
11B4:  BCLR.B  42.0
11B6:  RLC     W6,W6
11B8:  SWAP    W6
11BA:  AND     #FF,W6
11BC:  CP0     W6
11BE:  BRA     Z,1302
11C0:  BCLR.B  42.1
11C2:  BCLR.B  42.0
11C4:  RLC     W7,W7
11C6:  SWAP    W7
11C8:  AND     #FF,W7
11CA:  CP0     W7
11CC:  BRA     Z,130C
11CE:  BCLR.B  42.1
11D0:  BCLR.B  42.0
11D2:  CP      W7,W6
11D4:  BRA     Z,130E
11D6:  BRA     N,131E
11D8:  BCLR    W9.0
11DA:  BSET    W9.1
11DC:  SUB     W7,W6,W8
11DE:  MOV     W7,W6
11E0:  AND     #FF,W1
11E2:  BSET    W1.7
11E4:  AND     #FF,W3
11E6:  BSET    W3.7
11E8:  MOV     #28,W7
11EA:  CP      W7,W8
11EC:  BRA     N,1210
11EE:  BCLR.B  42.1
11F0:  BCLR.B  42.0
11F2:  RRC     W1,W1
11F4:  RRC     W0,W0
11F6:  DEC     W8,W8
11F8:  BRA     NZ,11EE
11FA:  BRA     1216
11FC:  MOV     #28,W7
11FE:  CP      W7,W8
1200:  BRA     N,1214
1202:  BCLR.B  42.1
1204:  BCLR.B  42.0
1206:  RRC     W3,W3
1208:  RRC     W2,W2
120A:  DEC     W8,W8
120C:  BRA     NZ,1202
120E:  BRA     122E
1210:  MOV     W2,W0
1212:  MOV     W3,W1
1214:  BRA     129C
1216:  BTSS    W11.F
1218:  BRA     123C
121A:  BTSC    W9.4
121C:  MOV     W12,W11
121E:  NEG     W0,W0
1220:  BRA     Z,1226
1222:  COM.B   W1L,W1L
1224:  BRA     1228
1226:  NEG     W1,W1
1228:  BTSC    W9.4
122A:  BRA     1282
122C:  BRA     123C
122E:  BTSS    W11.F
1230:  BRA     123C
1232:  NEG     W2,W2
1234:  BRA     Z,123A
1236:  COM.B   W3L,W3L
1238:  BRA     123C
123A:  NEG     W3,W3
123C:  AND     #FF,W5
123E:  BCLR.B  42.1
1240:  BCLR.B  42.0
1242:  ADD     W0,W2,W0
1244:  ADDC.B  W1L,W3L,W1L
1246:  BTSC.B  42.0
1248:  BSET    W9.3
124A:  BTSC    W9.0
124C:  BRA     1260
124E:  BTSC    W9.1
1250:  BRA     1254
1252:  BRA     126A
1254:  BTSC    W11.F
1256:  BRA     1282
1258:  BTSC    W9.3
125A:  BRA     12AE
125C:  BSET    W9.6
125E:  BRA     129C
1260:  BTSC    W11.F
1262:  BRA     1282
1264:  BTSC    W9.3
1266:  BRA     12AE
1268:  BRA     129C
126A:  BCLR    W9.2
126C:  BTSC    W11.F
126E:  BRA     1278
1270:  MOV     W10,W11
1272:  BTSC    W9.3
1274:  BRA     12AE
1276:  BRA     12E4
1278:  BSET    W9.4
127A:  XOR.B   #80,W1L
127C:  BTSC    W1.7
127E:  BRA     121A
1280:  MOV     W10,W11
1282:  AND     #FF,W1
1284:  IOR      W0,  W1,W7
1286:  BRA     Z,129C
1288:  BTSC    W1.7
128A:  BRA     129C
128C:  BCLR.B  42.1
128E:  BCLR.B  42.0
1290:  RLC     W0,W0
1292:  RLC     W1,W1
1294:  DEC     W6,W6
1296:  BTSC.B  42.1
1298:  BRA     12FC
129A:  BRA     1288
129C:  BTSC    W9.0
129E:  MOV     W10,W11
12A0:  BTSC    W9.1
12A2:  MOV     W12,W11
12A4:  BTSS    W9.5
12A6:  BRA     12DC
12A8:  BTSC    W10.F
12AA:  BSET    W0.8
12AC:  BRA     12E4
12AE:  BSET.B  42.0
12B0:  RRC.B   W1L,W1L
12B2:  RRC     W0,W0
12B4:  BTSC.B  42.0
12B6:  BSET    W9.5
12B8:  INC     W6,W6
12BA:  BRA     Z,12FC
12BC:  BTSS    W9.5
12BE:  BRA     12D0
12C0:  INC     W0,W0
12C2:  BRA     NZ,12D0
12C4:  INC.B   W1L,W1L
12C6:  BRA     NZ,12D0
12C8:  RRC.B   W1L,W1L
12CA:  RRC     W0,W0
12CC:  INC     W6,W6
12CE:  BRA     Z,12FC
12D0:  BTSC    W9.0
12D2:  MOV     W10,W11
12D4:  BTSC    W9.1
12D6:  MOV     W12,W11
12D8:  BTSC.B  42.1
12DA:  BRA     12FC
12DC:  BTSC    W9.6
12DE:  MOV     W10,W11
12E0:  BTSC    W9.7
12E2:  MOV     W12,W11
12E4:  IOR      W0,  W1,W2
12E6:  BRA     Z,132E
12E8:  BCLR    W1.7
12EA:  SWAP    W6
12EC:  BCLR.B  42.1
12EE:  BCLR.B  42.0
12F0:  RRC     W6,W6
12F2:  XOR     W6,W1,W1
12F4:  BSET    W1.F
12F6:  BTSS    W11.F
12F8:  BCLR    W1.F
12FA:  BRA     132E
12FC:  MOV     #0,W0
12FE:  MOV     #0,W1
1300:  BRA     132E
1302:  BTSC    W10.F
1304:  XOR     W8,W3,W3
1306:  MOV     W2,W0
1308:  MOV     W3,W1
130A:  BRA     132E
130C:  BRA     132E
130E:  AND     #FF,W3
1310:  BSET    W3.7
1312:  AND     #FF,W1
1314:  BSET    W1.7
1316:  BTSC    W11.F
1318:  BCLR    W3.7
131A:  BSET    W9.2
131C:  BRA     122E
131E:  SUB     W6,W7,W8
1320:  AND     #FF,W1
1322:  BSET    W1.7
1324:  AND     #FF,W3
1326:  BSET    W3.7
1328:  BCLR    W9.1
132A:  BSET    W9.0
132C:  BRA     11FC
132E:  MOV     #12,W5
1330:  REPEAT  #3
1332:  MOV     [--W15],[W5--]
1334:  MOV     [--W15],W5
1336:  RETURN  
*
1608:  MOV     W5,[W15++]
160A:  MOV     #C,W5
160C:  REPEAT  #3
160E:  MOV     [W5++],[W15++]
1610:  MOV     W0,W4
1612:  MOV     W1,W5
1614:  MOV     W2,W6
1616:  MOV     W3,W7
1618:  CLR     W0
161A:  CLR     W1
161C:  CLR     W2
161E:  CLR     W3
1620:  BCLR    W8.0
1622:  BTSS    W7.F
1624:  BRA     1630
1626:  BSET    W8.0
1628:  NEG     W4,W4
162A:  COM     W5,W5
162C:  COM     W6,W6
162E:  COM     W7,W7
1630:  IOR      W4,  W5,W9
1632:  BRA     NZ,1638
1634:  IOR      W6,  W7,W9
1636:  BRA     Z,1662
1638:  MOV     #473,W9
163A:  BTSC    W3.4
163C:  BRA     1654
163E:  BCLR.B  42.0
1640:  RLC     W4,W4
1642:  RLC     W5,W5
1644:  RLC     W6,W6
1646:  RLC     W7,W7
1648:  RLC     W0,W0
164A:  RLC     W1,W1
164C:  RLC     W2,W2
164E:  RLC     W3,W3
1650:  DEC     W9,W9
1652:  BRA     NZ,163A
1654:  SL      W9,#4,W9
1656:  BCLR.B  42.0
1658:  BCLR    W9.F
165A:  BCLR    W3.4
165C:  XOR     W9,W3,W3
165E:  BTSC    W8.0
1660:  BSET    W3.F
1662:  MOV     #12,W5
1664:  REPEAT  #3
1666:  MOV     [--W15],[W5--]
1668:  MOV     [--W15],W5
166A:  RETURN  
166C:  MOV     W8,[W15++]
166E:  MOV     #12,W8
1670:  REPEAT  #4
1672:  MOV     [W8++],[W15++]
1674:  CLR     W11
1676:  MUL.UU  W12,#0,W12
1678:  MOV     W3,W8
167A:  MOV     W7,W9
167C:  MOV     #7FF,W10
167E:  BCLR.B  42.0
1680:  BCLR.B  42.1
1682:  ASR     W8,#4,W8
1684:  AND     W10,W8,W8
1686:  CP0     W8
1688:  BRA     Z,176C
168A:  BCLR.B  42.0
168C:  BCLR.B  42.1
168E:  ASR     W9,#4,W9
1690:  AND     W10,W9,W9
1692:  CP0     W9
1694:  BRA     Z,176C
1696:  ADD     W9,W8,W8
1698:  BTSC    W9.B
169A:  BRA     16A4
169C:  SUB     #3FF,W8
169E:  BRA     Z,176C
16A0:  BRA     NC,176C
16A2:  BRA     16AA
16A4:  MOV     #401,W10
16A6:  ADD.B   W10L,W5L,W5L
16A8:  BRA     C,176C
16AA:  XOR     W3,W7,W13
16AC:  BCLR.B  42.0
16AE:  BCLR.B  42.1
16B0:  AND     #F,W3
16B2:  BSET    W3.4
16B4:  AND     #F,W7
16B6:  BSET    W7.4
16B8:  MOV     W8,[W15++]
16BA:  MUL.UU  W4,W1,W8
16BC:  MUL.UU  W5,W0,W10
16BE:  ADD     W8,W10,W10
16C0:  ADDC    W9,W11,W11
16C2:  ADDC    #0,W12
16C4:  MUL.UU  W4,W2,W8
16C6:  ADD     W8,W11,W11
16C8:  ADDC    W9,W12,W12
16CA:  MUL.UU  W5,W1,W8
16CC:  CLR     W10
16CE:  ADD     W8,W11,W11
16D0:  ADDC    W9,W12,W12
16D2:  ADDC    #0,W10
16D4:  MUL.UU  W6,W0,W8
16D6:  ADD     W8,W11,W11
16D8:  ADDC    W9,W12,W12
16DA:  ADDC    #0,W10
16DC:  CLR     W11
16DE:  MUL.UU  W4,W3,W8
16E0:  ADD     W8,W12,W12
16E2:  ADDC    W9,W10,W10
16E4:  ADDC    #0,W11
16E6:  MUL.UU  W5,W2,W8
16E8:  ADD     W8,W12,W12
16EA:  ADDC    W9,W10,W10
16EC:  ADDC    #0,W11
16EE:  MUL.UU  W6,W1,W8
16F0:  ADD     W8,W12,W12
16F2:  ADDC    W9,W10,W10
16F4:  ADDC    #0,W11
16F6:  MUL.UU  W7,W0,W8
16F8:  ADD     W8,W12,W12
16FA:  ADDC    W9,W10,W10
16FC:  ADDC    #0,W11
16FE:  MOV     W12,W0
1700:  CLR     W12
1702:  MUL.UU  W5,W3,W8
1704:  ADD     W8,W10,W10
1706:  ADDC    W9,W11,W11
1708:  ADDC    #0,W12
170A:  MUL.UU  W6,W2,W8
170C:  ADD     W8,W10,W10
170E:  ADDC    W9,W11,W11
1710:  ADDC    #0,W12
1712:  MUL.UU  W6,W3,W8
1714:  ADD     W8,W11,W11
1716:  ADDC    W9,W12,W12
1718:  MUL.UU  W7,W1,W8
171A:  ADD     W8,W10,W10
171C:  ADDC    W9,W11,W11
171E:  ADDC    #0,W12
1720:  MUL.UU  W7,W2,W8
1722:  ADD     W8,W11,W11
1724:  ADDC    W9,W12,W12
1726:  MUL.UU  W7,W3,W8
1728:  ADD     W8,W12,W12
172A:  MOV     W10,W1
172C:  MOV     W11,W2
172E:  MOV     W12,W3
1730:  MOV     #5,W4
1732:  BCLR.B  42.0
1734:  RRC     W3,W3
1736:  RRC     W2,W2
1738:  RRC     W1,W1
173A:  RRC     W0,W0
173C:  DEC     W4,W4
173E:  BRA     NZ,1732
1740:  MOV     [--W15],W8
1742:  INC     W8,W8
1744:  IOR      W0,  W1,W6
1746:  BRA     Z,174A
1748:  BRA     174E
174A:  IOR      W2,  W3,W6
174C:  BRA     Z,175E
174E:  BTSC    W3.4
1750:  BRA     175E
1752:  BCLR.B  42.0
1754:  RLC     W0,W0
1756:  RLC     W1,W1
1758:  RLC     W2,W2
175A:  RLC     W3,W3
175C:  DEC     W8,W8
175E:  SL      W8,#4,W8
1760:  BCLR    W3.F
1762:  BTSC    W13.F
1764:  BSET    W3.F
1766:  BCLR    W3.4
1768:  XOR     W8,W3,W3
176A:  BRA     1772
176C:  MUL.UU  W0,#0,W0
176E:  MUL.UU  W0,#0,W2
1770:  BRA     1772
1772:  MOV     #1A,W8
1774:  REPEAT  #4
1776:  MOV     [--W15],[W8--]
1778:  MOV     [--W15],W8
177A:  RETURN  
177C:  MOV     W8,[W15++]
177E:  MOV     #12,W8
1780:  REPEAT  #4
1782:  MOV     [W8++],[W15++]
1784:  MOV     #8000,W8
1786:  BTSC.B  43.0
1788:  XOR     W8,W7,W7
178A:  CP0     W0
178C:  BRA     NZ,179C
178E:  CP0     W1
1790:  BRA     NZ,179C
1792:  CP0     W2
1794:  BRA     NZ,179C
1796:  MOV     #7FFF,W10
1798:  AND     W3,W10,W10
179A:  BTSS.B  42.1
179C:  MOV     W3,W10
179E:  XOR     W7,W10,W11
17A0:  MOV     W3,W8
17A2:  MOV     W7,W9
17A4:  MOV     W7,W12
17A6:  MOV     #7FF,W13
17A8:  BCLR.B  42.1
17AA:  BCLR.B  42.0
17AC:  ASR     W8,#4,W8
17AE:  AND     W13,W8,W8
17B0:  CP0     W8
17B2:  BRA     Z,192C
17B4:  BCLR.B  42.1
17B6:  BCLR.B  42.0
17B8:  ASR     W9,#4,W9
17BA:  AND     W13,W9,W9
17BC:  CP0     W9
17BE:  BRA     Z,193C
17C0:  CLR     W13
17C2:  BCLR.B  42.1
17C4:  BCLR.B  42.0
17C6:  CP      W9,W8
17C8:  BRA     Z,193E
17CA:  BRA     N,194E
17CC:  BCLR    W13.0
17CE:  BSET    W13.1
17D0:  SUB     W9,W8,W8
17D2:  AND     #F,W3
17D4:  BSET    W3.4
17D6:  AND     #F,W7
17D8:  BSET    W7.4
17DA:  SUB     #34,W8
17DC:  BRA     NN,180A
17DE:  ADD     #34,W8
17E0:  BCLR.B  42.1
17E2:  BCLR.B  42.0
17E4:  RRC     W3,W3
17E6:  RRC     W2,W2
17E8:  RRC     W1,W1
17EA:  RRC     W0,W0
17EC:  DEC     W8,W8
17EE:  BRA     NZ,17E0
17F0:  BRA     181A
17F2:  SUB     #34,W8
17F4:  BRA     NN,1814
17F6:  ADD     #34,W8
17F8:  BCLR.B  42.1
17FA:  BCLR.B  42.0
17FC:  RRC     W7,W7
17FE:  RRC     W6,W6
1800:  RRC     W5,W5
1802:  RRC     W4,W4
1804:  DEC     W8,W8
1806:  BRA     NZ,17F8
1808:  BRA     1840
180A:  MOV     W4,W0
180C:  MOV     W5,W1
180E:  MOV     W6,W2
1810:  MOV     W7,W3
1812:  XOR     W11,W12,W12
1814:  BTSC    W12.F
1816:  BTG     W11.F
1818:  BRA     190C
181A:  BTSS    W11.F
181C:  BRA     185C
181E:  BTSC    W13.4
1820:  MOV     W12,W11
1822:  COM     W0,W0
1824:  COM     W1,W1
1826:  COM     W2,W2
1828:  COM.B   W3L,W3L
182A:  AND.B   #1F,W3L
182C:  INC     W0,W0
182E:  BRA     NZ,183A
1830:  INC     W1,W1
1832:  BRA     NZ,183A
1834:  INC     W2,W2
1836:  BRA     NZ,183A
1838:  INC.B   W3L,W3L
183A:  BTSC    W13.4
183C:  BRA     18A2
183E:  BRA     185C
1840:  BTSS    W11.F
1842:  BRA     185C
1844:  COM     W4,W4
1846:  COM     W5,W5
1848:  COM     W6,W6
184A:  COM.B   W7L,W7L
184C:  AND.B   #1F,W7L
184E:  INC     W4,W4
1850:  BRA     NZ,185C
1852:  INC     W5,W5
1854:  BRA     NZ,185C
1856:  INC     W6,W6
1858:  BRA     NZ,185C
185A:  INC.B   W7L,W7L
185C:  BCLR.B  42.1
185E:  BCLR.B  42.0
1860:  ADD     W0,W4,W0
1862:  ADDC    W1,W5,W1
1864:  ADDC    W2,W6,W2
1866:  ADDC.B  W3L,W7L,W3L
1868:  BTSC    W3.5
186A:  BSET    W13.3
186C:  BTSC    W13.0
186E:  BRA     1882
1870:  BTSC    W13.1
1872:  BRA     1876
1874:  BRA     188C
1876:  BTSC    W11.F
1878:  BRA     18A2
187A:  BTSC    W13.3
187C:  BRA     18D0
187E:  BSET    W13.6
1880:  BRA     18C4
1882:  BTSC    W11.F
1884:  BRA     18A2
1886:  BTSC    W13.3
1888:  BRA     18D0
188A:  BRA     18C4
188C:  BTSC    W11.F
188E:  BRA     1898
1890:  MOV     W10,W11
1892:  BTSC    W13.3
1894:  BRA     18D0
1896:  BRA     190C
1898:  BSET    W13.4
189A:  XOR.B   #10,W3L
189C:  BTSC    W3.4
189E:  BRA     181E
18A0:  MOV     W10,W11
18A2:  AND     #1F,W3
18A4:  IOR      W3,  W2,W8
18A6:  BRA     NZ,18AC
18A8:  IOR      W1,  W0,W8
18AA:  BRA     Z,18C4
18AC:  BTSC    W3.4
18AE:  BRA     18C4
18B0:  BCLR.B  42.1
18B2:  BCLR.B  42.0
18B4:  RLC     W0,W0
18B6:  RLC     W1,W1
18B8:  RLC     W2,W2
18BA:  RLC     W3,W3
18BC:  DEC     W9,W9
18BE:  BTSC.B  42.1
18C0:  BRA     1926
18C2:  BRA     18AC
18C4:  BTSC    W13.0
18C6:  MOV     W10,W11
18C8:  BTSC    W13.1
18CA:  MOV     W12,W11
18CC:  BTSS    W13.5
18CE:  BRA     190C
18D0:  BCLR.B  42.0
18D2:  RRC.B   W3L,W3L
18D4:  RRC     W2,W2
18D6:  RRC     W1,W1
18D8:  RRC     W0,W0
18DA:  BTSC.B  42.0
18DC:  BSET    W13.5
18DE:  INC     W9,W9
18E0:  BTSC.B  42.1
18E2:  BRA     1926
18E4:  BTSS    W13.5
18E6:  BRA     1904
18E8:  INC     W0,W0
18EA:  BRA     NZ,1904
18EC:  INC     W1,W1
18EE:  BRA     NZ,1904
18F0:  INC     W2,W2
18F2:  BRA     NZ,1904
18F4:  INC     W3,W3
18F6:  BRA     NZ,1904
18F8:  RRC.B   W3L,W3L
18FA:  RRC     W2,W2
18FC:  RRC     W1,W1
18FE:  RRC     W0,W0
1900:  INC     W9,W9
1902:  BRA     Z,1926
1904:  BTSC    W13.0
1906:  MOV     W10,W11
1908:  BTSC    W13.1
190A:  MOV     W12,W11
190C:  IOR      W0,  W1,W4
190E:  BRA     NZ,1914
1910:  IOR      W2,  W3,W4
1912:  BRA     Z,1960
1914:  BCLR    W3.4
1916:  BCLR.B  42.1
1918:  BCLR.B  42.0
191A:  SL      W9,#4,W9
191C:  XOR     W9,W3,W3
191E:  BSET    W3.F
1920:  BTSS    W11.F
1922:  BCLR    W3.F
1924:  BRA     1960
1926:  MUL.UU  W0,#0,W0
1928:  MUL.UU  W2,#0,W2
192A:  BRA     1960
192C:  MOV     #8000,W8
192E:  BTSC    W10.F
1930:  XOR     W8,W7,W7
1932:  MOV     W5,W1
1934:  MOV     W4,W0
1936:  MOV     W6,W2
1938:  MOV     W7,W3
193A:  BRA     1960
193C:  BRA     1960
193E:  AND     #F,W7
1940:  BSET    W7.4
1942:  AND     #F,W3
1944:  BSET    W3.4
1946:  BTSC    W11.F
1948:  BCLR    W7.4
194A:  BSET    W13.2
194C:  BRA     1840
194E:  AND     #F,W3
1950:  BSET    W3.4
1952:  AND     #F,W7
1954:  BSET    W7.4
1956:  SUB     W8,W9,W8
1958:  ADD     W8,W9,W9
195A:  BCLR    W13.1
195C:  BSET    W13.0
195E:  BRA     17F2
1960:  MOV     #1A,W8
1962:  REPEAT  #4
1964:  MOV     [--W15],[W8--]
1966:  MOV     [--W15],W8
1968:  RETURN  
196A:  MOV     W5,[W15++]
196C:  MOV     #C,W5
196E:  REPEAT  #5
1970:  MOV     [W5++],[W15++]
1972:  MOV     W3,W8
1974:  MOV     W2,W7
1976:  MOV     W1,W6
1978:  MOV     W0,W5
197A:  MOV     W3,W9
197C:  MOV     #473,W11
197E:  ASR     W3,#4,W3
1980:  MOV     #7FF,W10
1982:  AND     W10,W3,W3
1984:  SUB     W11,W3,W11
1986:  AND     #1F,W8
1988:  BSET    W8.4
198A:  CLR     W0
198C:  CLR     W1
198E:  CLR     W2
1990:  CLR     W3
1992:  BCLR.B  42.0
1994:  RRC     W8,W8
1996:  RRC     W7,W7
1998:  RRC     W6,W6
199A:  RRC     W5,W5
199C:  RRC     W3,W3
199E:  RRC     W2,W2
19A0:  RRC     W1,W1
19A2:  RRC     W0,W0
19A4:  DEC     W11,W11
19A6:  BRA     NZ,1992
19A8:  BTSS    W9.F
19AA:  BRA     19B6
19AC:  NEG     W0,W0
19AE:  COM     W1,W1
19B0:  COM     W2,W2
19B2:  COM     W3,W3
19B4:  BRA     19B6
19B6:  MOV     #16,W5
19B8:  REPEAT  #5
19BA:  MOV     [--W15],[W5--]
19BC:  MOV     [--W15],W5
19BE:  RETURN  
19C0:  MOV     W5,[W15++]
19C2:  MOV     W6,[W15++]
19C4:  MOV     W7,[W15++]
19C6:  XOR     W1,W3,W4
19C8:  BTSS    W4.F
19CA:  BRA     19D8
19CC:  BCLR.B  42.0
19CE:  BCLR.B  42.1
19D0:  BTSS    W1.F
19D2:  BRA     1A20
19D4:  BSET.B  42.0
19D6:  BRA     1A20
19D8:  MOV     W1,W4
19DA:  MOV     W0,W5
19DC:  MOV     W3,W6
19DE:  MOV     W2,W7
19E0:  RLC     W1,W1
19E2:  SWAP    W1
19E4:  RLC     W3,W3
19E6:  SWAP    W3
19E8:  SUB.B   W3L,W1L,W1L
19EA:  BRA     Z,19F6
19EC:  BTSS    W4.F
19EE:  BRA     1A20
19F0:  MOV     #1,W0
19F2:  XOR.B   42
19F4:  BRA     1A20
19F6:  MOV.B   W4L,W1L
19F8:  MOV.B   W6L,W3L
19FA:  BCLR    W1.7
19FC:  BCLR    W3.7
19FE:  SUB.B   W3L,W1L,W1L
1A00:  BRA     Z,1A0C
1A02:  BTSS    W4.F
1A04:  BRA     1A20
1A06:  MOV     #1,W0
1A08:  XOR.B   42
1A0A:  BRA     1A20
1A0C:  SUB     W7,W5,W1
1A0E:  BRA     Z,1A1A
1A10:  BTSS    W4.F
1A12:  BRA     1A20
1A14:  MOV     #1,W0
1A16:  XOR.B   42
1A18:  BRA     1A20
1A1A:  BCLR.B  42.0
1A1C:  BRA     1A20
1A1E:  BRA     1A20
1A20:  MOV     [--W15],W7
1A22:  MOV     [--W15],W6
1A24:  MOV     [--W15],W5
1A26:  RETURN  
1A28:  MOV     W5,[W15++]
1A2A:  MOV     W1,W5
1A2C:  MOV     W0,W2
1A2E:  MOV     #B6,W4
1A30:  RLC     W1,W1
1A32:  SWAP    W1
1A34:  AND     #FF,W1
1A36:  SUB.B   W4L,W1L,W4L
1A38:  MOV.B   W5L,W3L
1A3A:  BSET    W3.7
1A3C:  AND     #FF,W3
1A3E:  CLR     W0
1A40:  CLR     W1
1A42:  CP      W4,#1F
1A44:  BRA     N,1A64
1A46:  BCLR.B  42.0
1A48:  RRC     W3,W3
1A4A:  RRC     W2,W2
1A4C:  RRC     W1,W1
1A4E:  RRC     W0,W0
1A50:  DEC     W4,W4
1A52:  BRA     NZ,1A46
1A54:  BTSS    W5.F
1A56:  BRA     1A64
1A58:  NEG     W0,W0
1A5A:  BRA     Z,1A60
1A5C:  COM     W1,W1
1A5E:  BRA     1A64
1A60:  NEG     W1,W1
1A62:  BRA     1A64
1A64:  MOV     [--W15],W5
1A66:  RETURN  
*
1C66:  MOV     W5,[W15++]
1C68:  MOV     #C,W5
1C6A:  REPEAT  #3
1C6C:  MOV     [W5++],[W15++]
1C6E:  MUL.UU  W0,W2,W4
1C70:  BTSS    W3.F
1C72:  BRA     1C78
1C74:  MUL.SS  W0,W3,W6
1C76:  BRA     1C7A
1C78:  MUL.UU  W0,W3,W6
1C7A:  BCLR.B  42.0
1C7C:  ADD     W6,W5,W5
1C7E:  ADDC    W7,#0,W8
1C80:  BTSS    W1.F
1C82:  BRA     1C88
1C84:  MUL.SS  W1,W2,W6
1C86:  BRA     1C8A
1C88:  MUL.UU  W1,W2,W6
1C8A:  ADDC    W6,W5,W5
1C8C:  ADDC    W7,W8,W8
1C8E:  ADDC    #0,W9
1C90:  MUL.SS  W1,W3,W6
1C92:  ADDC    W6,W8,W8
1C94:  ADDC    W9,W7,W7
1C96:  MOV     W7,W3
1C98:  MOV     W8,W2
1C9A:  MOV     W5,W1
1C9C:  MOV     W4,W0
1C9E:  MOV     #12,W5
1CA0:  REPEAT  #3
1CA2:  MOV     [--W15],[W5--]
1CA4:  MOV     [--W15],W5
1CA6:  RETURN  
1CA8:  MOV     W5,[W15++]
1CAA:  MOV     #C,W5
1CAC:  REPEAT  #3
1CAE:  MOV     [W5++],[W15++]
1CB0:  MOV     #0,W9
1CB2:  BTSC.B  43.0
1CB4:  MOV     #1,W9
1CB6:  MOV     W9,[W15++]
1CB8:  XOR     W1,W3,W9
1CBA:  BTSS    W1.F
1CBC:  BRA     1CC4
1CBE:  COM     W1,W1
1CC0:  NEG     W0,W0
1CC2:  ADDC    W1,#0,W1
1CC4:  BTSS    W3.F
1CC6:  BRA     1CCE
1CC8:  COM     W3,W3
1CCA:  NEG     W2,W2
1CCC:  ADDC    W3,#0,W3
1CCE:  XOR     W2,W3,W4
1CD0:  BRA     Z,1CFC
1CD2:  CLR     W4
1CD4:  CLR     W5
1CD6:  CLR     W6
1CD8:  CLR     W7
1CDA:  MOV     #20,W8
1CDC:  BCLR.B  42.0
1CDE:  RLC     W0,W0
1CE0:  RLC     W1,W1
1CE2:  RLC     W4,W4
1CE4:  RLC     W5,W5
1CE6:  CP      W5,W3
1CE8:  BRA     NZ,1CEC
1CEA:  CPB     W4,W2
1CEC:  BRA     NC,1CF4
1CEE:  SUB     W4,W2,W4
1CF0:  SUBB    W5,W3,W5
1CF2:  BSET.B  42.0
1CF4:  RLC     W6,W6
1CF6:  RLC     W7,W7
1CF8:  DEC     W8,W8
1CFA:  BRA     NZ,1CDC
1CFC:  BTSS    W9.F
1CFE:  BRA     1D0E
1D00:  NEG     W6,W0
1D02:  BRA     Z,1D06
1D04:  BRA     NZ,1D0A
1D06:  NEG     W7,W1
1D08:  BRA     1D14
1D0A:  COM     W7,W1
1D0C:  BRA     1D14
1D0E:  MOV     W7,W1
1D10:  MOV     W6,W0
1D12:  BRA     1D14
1D14:  MOV     [--W15],W9
1D16:  CP0     W9
1D18:  BRA     Z,1D1C
1D1A:  MOV.D   W4,W0
1D1C:  MOV     #12,W5
1D1E:  REPEAT  #3
1D20:  MOV     [--W15],[W5--]
1D22:  MOV     [--W15],W5
1D24:  RETURN  
*
1D80:  MOV     W5,[W15++]
1D82:  MOV     W6,[W15++]
1D84:  MOV     W0,W4
1D86:  MOV     W1,W5
1D88:  CLR     W0
1D8A:  CLR     W1
1D8C:  BCLR    W6.0
1D8E:  BTSS    W5.F
1D90:  BRA     1D9E
1D92:  BSET    W6.0
1D94:  NEG     W4,W4
1D96:  BRA     Z,1D9C
1D98:  COM     W5,W5
1D9A:  BRA     1D9E
1D9C:  NEG     W5,W5
1D9E:  IOR      W4,  W5,W3
1DA0:  BRA     Z,1DC8
1DA2:  CLR     W2
1DA4:  MOV     #B6,W1
1DA6:  BTSC    W2.7
1DA8:  BRA     1DB8
1DAA:  BCLR.B  42.0
1DAC:  RLC     W4,W4
1DAE:  RLC     W5,W5
1DB0:  RLC     W0,W0
1DB2:  RLC     W2,W2
1DB4:  DEC     W1,W1
1DB6:  BRA     NZ,1DA6
1DB8:  SWAP    W1
1DBA:  BCLR.B  42.0
1DBC:  RRC     W1,W1
1DBE:  BCLR    W1.F
1DC0:  BCLR    W2.7
1DC2:  XOR.B   W2L,W1L,W1L
1DC4:  BTSC    W6.0
1DC6:  BSET    W1.F
1DC8:  MOV     [--W15],W6
1DCA:  MOV     [--W15],W5
1DCC:  RETURN  
1DCE:  MOV     W0,W2
1DD0:  MOV     W1,W3
1DD2:  MOV.B   W1L,W0L
1DD4:  SWAP    W0
1DD6:  BSET    W0.F
1DD8:  RLC     W1,W1
1DDA:  SWAP    W1
1DDC:  ZE      W1,W1
1DDE:  MOV     #8E,W4
1DE0:  SUB.B   W4L,W1L,W1L
1DE2:  BRA     Z,1DF0
1DE4:  CP0     W0
1DE6:  BRA     Z,1DF0
1DE8:  BCLR.B  42.0
1DEA:  RRC     W0,W0
1DEC:  DEC     W1,W1
1DEE:  BRA     NZ,1DE4
1DF0:  BTSS    W3.F
1DF2:  BRA     1DF8
1DF4:  NEG     W0,W0
1DF6:  BRA     1DF8
1DF8:  RETURN  
*
1E60:  MOV     W8,[W15++]
1E62:  MOV     #12,W8
1E64:  REPEAT  #4
1E66:  MOV     [W8++],[W15++]
1E68:  XOR     W3,W7,W13
1E6A:  MOV     W3,W8
1E6C:  MOV     W7,W9
1E6E:  MOV     #7FF,W10
1E70:  BCLR.B  42.0
1E72:  BCLR.B  42.1
1E74:  ASR     W8,#4,W8
1E76:  AND     W10,W8,W8
1E78:  CP0     W8
1E7A:  BRA     Z,1F54
1E7C:  BCLR.B  42.0
1E7E:  BCLR.B  42.1
1E80:  ASR     W9,#4,W9
1E82:  AND     W10,W9,W9
1E84:  CP0     W9
1E86:  BRA     Z,1F54
1E88:  CLR     W10
1E8A:  SUB     W8,W9,W12
1E8C:  BRA     NC,1E94
1E8E:  ADD     #3FF,W12
1E90:  BRA     C,1F54
1E92:  BRA     1E9C
1E94:  MOV     #401,W11
1E96:  SUB     W12,W11,W12
1E98:  BRA     NC,1F54
1E9A:  BRA     Z,1F54
1E9C:  CLR     W8
1E9E:  CLR     W9
1EA0:  CLR     W10
1EA2:  CLR     W11
1EA4:  AND     #1F,W3
1EA6:  BSET    W3.4
1EA8:  AND     #1F,W7
1EAA:  BSET    W7.4
1EAC:  MOV     W12,[W15++]
1EAE:  MOV     #36,W12
1EB0:  SUB     W0,W4,W0
1EB2:  SUBB    W1,W5,W1
1EB4:  SUBB    W2,W6,W2
1EB6:  SUBB    W3,W7,W3
1EB8:  BRA     N,1EBE
1EBA:  BRA     C,1EC8
1EBC:  BRA     NZ,1ECA
1EBE:  ADD     W0,W4,W0
1EC0:  ADDC    W1,W5,W1
1EC2:  ADDC    W2,W6,W2
1EC4:  ADDC    W3,W7,W3
1EC6:  BRA     1ECA
1EC8:  BSET    W8.0
1ECA:  DEC     W12,W12
1ECC:  BRA     Z,1EE4
1ECE:  BCLR.B  42.0
1ED0:  RLC     W0,W0
1ED2:  RLC     W1,W1
1ED4:  RLC     W2,W2
1ED6:  RLC     W3,W3
1ED8:  BCLR.B  42.0
1EDA:  RLC     W8,W8
1EDC:  RLC     W9,W9
1EDE:  RLC     W10,W10
1EE0:  RLC     W11,W11
1EE2:  BRA     1EB0
1EE4:  MOV     [--W15],W12
1EE6:  BTSC    W11.5
1EE8:  BRA     1EEC
1EEA:  BRA     1EF8
1EEC:  BCLR.B  42.0
1EEE:  RRC     W11,W11
1EF0:  RRC     W10,W10
1EF2:  RRC     W9,W9
1EF4:  RRC     W8,W8
1EF6:  BRA     1EFE
1EF8:  DEC     W12,W12
1EFA:  BCLR.B  42.0
1EFC:  BRA     Z,1F54
1EFE:  BTSC.B  42.0
1F00:  BRA     1F14
1F02:  RLC     W0,W0
1F04:  RLC     W1,W1
1F06:  RLC     W2,W2
1F08:  RLC     W3,W3
1F0A:  SUB     W0,W4,W4
1F0C:  SUBB    W1,W5,W5
1F0E:  SUBB    W2,W6,W6
1F10:  SUBB    W3,W7,W7
1F12:  BRA     NC,1F3E
1F14:  INC     W8,W8
1F16:  BRA     NZ,1F3E
1F18:  INC     W9,W9
1F1A:  BRA     NZ,1F3E
1F1C:  INC     W10,W10
1F1E:  BRA     NZ,1F3E
1F20:  INC     W11,W11
1F22:  BRA     NZ,1F3E
1F24:  INC     W12,W12
1F26:  BRA     Z,1F54
1F28:  BRA     1F3E
1F2A:  DEC     W12,W12
1F2C:  BRA     Z,1F54
1F2E:  BTSC    W11.4
1F30:  BRA     1F3E
1F32:  BCLR.B  42.0
1F34:  RLC     W8,W8
1F36:  RLC     W9,W9
1F38:  RLC     W10,W10
1F3A:  RLC     W11,W11
1F3C:  BRA     1F2E
1F3E:  SL      W12,#4,W12
1F40:  BCLR.B  42.0
1F42:  BCLR    W12.F
1F44:  BTSC    W13.F
1F46:  BSET    W12.F
1F48:  BCLR    W11.4
1F4A:  XOR     W12,W11,W3
1F4C:  MOV     W10,W2
1F4E:  MOV     W9,W1
1F50:  MOV     W8,W0
1F52:  BRA     1F5E
1F54:  MOV     #0,W0
1F56:  MOV     #0,W1
1F58:  MOV     #0,W2
1F5A:  MOV     #0,W3
1F5C:  BRA     1F5E
1F5E:  MOV     #1A,W8
1F60:  REPEAT  #4
1F62:  MOV     [--W15],[W8--]
1F64:  MOV     [--W15],W8
1F66:  RETURN  
....................  
.................... #list 
....................  
.................... #include "lib/BL_Support.h" 
.................... /*  
....................  * File:    BL_Support.h 
....................  * Author:  Dr.Santi Nuratch 
....................  *          Embedded Computing and Control Lab., INC-KMUTT 
....................  * Created on 22 September 2016, 13:14 
....................  */ 
....................  
.................... #ifndef BL_SUPPORT_H 
.................... #define	BL_SUPPORT_H 
....................  
....................  
.................... /******************************************************************************/ 
.................... /*                   BOOTLOADER SUPPORT CONFIGURATION                         */ 
.................... /*                          (DO NOT CHANGE)                                   */ 
.................... /******************************************************************************/ 
.................... /* Bootloader */ 
.................... #define LOADER_PAGES 	3  
.................... #define ERASE_SIZE 		2048    /* 2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word */ 
....................                                 /* each block has 512 instructions (1024 words), each instruction requires 4 bytes (2 words), so 512*4 = 2048 bytes */ 
.................... #define LOADER_SIZE 	((LOADER_PAGES * (ERASE_SIZE/2)) - 1)   /* 2 bytes per address, so divided by 2, 2048/2 = 1024 */  
.................... #define LOADER_END  	LOADER_SIZE                             /* End address      */ 
.................... #define LOADER_ADDR 	0xC00//(LOADER_END - LOADER_SIZE)       /* Start address    */ 
....................  
.................... #build (reset=LOADER_END+1, interrupt=LOADER_END+5) 
.................... #org 0, LOADER_END {}   /* 0x0000 - END */ 
....................  
.................... /******************************************************************************/ 
.................... /*                                  END                                       */ 
.................... /******************************************************************************/ 
....................  
.................... #endif	/* BL_SUPPORT_H */ 
....................  
....................  
.................... #include "const/const_var.h" 
.................... #ifndef CONST_H 
.................... #define CONST_H 
....................  
.................... // configulation 
.................... #define SAMPLING_TIME 0.01f 
.................... #define ANGLE 0 //PI/2.0 
.................... #define OMEGA 0.3f 
.................... #define TIME_OUT 10.0f 
....................  
.................... #define INPUT_VOLTAGE 12f 
....................  
.................... #define RESOLUTION 600.0f 
.................... #define LEAD 8.0f // Lead length 
....................  
.................... #define GO_FORWARD 1 
.................... #define GO_BACKWARD 0 
.................... #define GO_BREAK 2 
....................  
.................... #define MAX_WORK_SPACE_X 270.0f 
.................... #define MAX_WORK_SPACE_Y 300.0f 
....................  
.................... #define MIN_WORK_SPACE_X 20.0f 
.................... #define MIN_WORK_SPACE_Y 20.0f 
....................  
.................... #define DEFAULT_ROTATE 127 
....................  
.................... #define DEFAULT_KEEP 133 
.................... #define GRIPPER_OPEN 100 
....................  
.................... #endif 
....................  
.................... #include "const/pin_var.h" 
.................... #ifndef PIN_VAR_H 
.................... #define PIN_VAR_H 
....................  
.................... // -------------- PIN -------------------- 
.................... // servo rotate 
.................... #PIN_SELECT oc3 = PIN_B14 
.................... // servo keep 
.................... #PIN_SELECT oc4 = PIN_B15 
....................  
.................... // PIN_A3 is DTR 
....................  
.................... // limit switch 
.................... #define SWITCH_X PIN_A0 
.................... #define SWITCH_Y PIN_A1 
.................... #define SWITCH_Z PIN_B11 
....................  
.................... //motor X 
.................... #define DIR_M1_IN1 PIN_A2 
.................... #define DIR_M1_IN2 PIN_A4 
.................... #PIN_SELECT oc1 = PIN_B0 
....................  
.................... // motor y 
.................... #define DIR_M2_IN2 PIN_B2 
.................... #define DIR_M2_IN1 PIN_B1 
.................... #PIN_SELECT oc2 = PIN_B3 
....................  
.................... // motor z 
.................... #define DIR_M3_IN1 PIN_B8 
.................... #define DIR_M3_IN2 PIN_B10 
....................  
.................... // encoder X axis 
.................... #define INT_MOTORX_A PIN_B4 
.................... #define INT_MOTORX_B PIN_B5 
.................... #PIN_SELECT INT1 = INT_MOTORX_A 
....................  
.................... // encoder Y axis 
.................... #define INT_EXT0_PIN PIN_B7 
.................... #define INT_MOTORY_B PIN_B6 
....................  
.................... //======================================== 
....................  
.................... #endif 
....................  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include "math/math_calculate.h" 
.................... #ifndef MATH_CAL_H 
.................... #define MATH_CAL_H 
....................  
.................... // #define RESOLUTION 600.0 
.................... // #define LEAD 8.0 // Lead length 
....................  
.................... float chirpSineFreq(float time, float freq0, float freq1) 
.................... { 
....................     // sin(2(pi)(f)(t^2)) 
....................     float o1 = 2 * pi; 
....................     float o2 = freq0 * time; 
....................     float o3 = (time * time) / 2.0f; 
....................     float o4 = (freq1 - freq0) / TIME_OUT; 
....................     float signal = sin(o1 * (o2 + (o3 * o4))) * INPUT_VOLTAGE; 
....................     return signal; 
.................... } 
....................  
.................... double distance(int pulse) 
*
1100:  MOV     W5,[W15++]
1102:  MOV     W6,[W15++]
1104:  MOV     972,W0
1106:  CALL    EE2
110A:  MOV     W0,W5
110C:  MOV     W1,W6
110E:  MOV     W5,W0
1110:  MOV     W6,W1
1112:  MOV     #0,W2
1114:  MOV     #4416,W3
1116:  CALL    F2C
111A:  MOV     W0,W5
111C:  MOV     W1,W6
111E:  MOV     W5,W0
1120:  MOV     W6,W1
1122:  MOV     #0,W2
1124:  MOV     #4100,W3
1126:  CALL    FF6
112A:  MOV     W1,W2
112C:  MOV     W0,W1
112E:  MOV     #0,W0
1130:  CALL    10BA
1134:  MOV     W0,974
1136:  MOV     W1,976
1138:  MOV     W2,978
113A:  MOV     W3,97A
.................... { 
....................     double dis = ((float)pulse / RESOLUTION) * LEAD; 
....................     return dis; 
113C:  MOV     974,W0
113E:  MOV     976,W1
1140:  MOV     978,W2
1142:  MOV     97A,W3
1144:  MOV     [--W15],W6
1146:  MOV     [--W15],W5
1148:  RETURN  
.................... } 
....................  
.................... float convertVoltToPwm(float volt) 
.................... { 
....................     return (volt * 100f) / 12f; 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "hw_io/interrupt.h" 
.................... #ifndef INTERRUPT_H 
.................... #define INTERRUPT_H 
....................  
.................... extern volatile long pulseX; 
.................... extern volatile long pulseY; 
....................  
.................... void initTimer() 
.................... { 
....................     setup_timer1(TMR_INTERNAL | TMR_DIV_BY_8, 20000); 
*
1558:  CLR     104
155A:  MOV     #4E20,W4
155C:  MOV     W4,102
155E:  MOV     #8010,W4
1560:  MOV     W4,104
....................     enable_interrupts(INT_TIMER1); 
1562:  BSET.B  94.3
....................     setup_timer3(TMR_INTERNAL | TMR_DIV_BY_256, 1250); 
1564:  CLR     112
1566:  MOV     #4E2,W4
1568:  MOV     W4,10E
156A:  MOV     #8030,W4
156C:  MOV     W4,112
....................     enable_interrupts(INT_TIMER3); 
156E:  BSET.B  95.0
....................     setup_timer4(TMR_INTERNAL | TMR_DIV_BY_256); 
1570:  CLR     11E
1572:  SETM    11A
1574:  MOV     #8030,W4
1576:  MOV     W4,11E
....................     set_timer4(0); 
1578:  CLR     114
157A:  RETURN  
.................... } 
....................  
.................... void setupEncoderInterrupt() 
.................... { 
....................     enable_interrupts(INT_EXT1); 
*
159C:  BSET.B  96.4
....................     ext_int_edge(1, H_TO_L); 
159E:  BSET.B  82.1
....................     enable_interrupts(INT_EXT0); 
15A0:  BSET.B  94.0
....................     ext_int_edge(0, H_TO_L); 
15A2:  BSET.B  82.0
15A4:  RETURN  
.................... } 
....................  
.................... void setSerialInterrupt() 
.................... { 
....................     enable_interrupts(INT_RDA); 
*
1598:  BSET.B  95.3
159A:  RETURN  
.................... } 
....................  
.................... // PIN_B4 
.................... #INT_EXT1 
.................... void INT_EXT_INPUT1(void) 
*
0DFC:  PUSH    42
0DFE:  PUSH    36
0E00:  PUSH    32
0E02:  MOV     W0,[W15++]
0E04:  MOV     #2,W0
0E06:  REPEAT  #C
0E08:  MOV     [W0++],[W15++]
.................... { 
....................     if (input(PIN_B5) == 1) 
0E0A:  BSET.B  2C8.5
0E0C:  BTSS.B  2CA.5
0E0E:  BRA     E18
....................     { 
....................         pulseX++; 
0E10:  INC     08B0
0E12:  BTSC.B  42.1
0E14:  INC     08B2
....................     } 
0E16:  BRA     E1E
....................     else 
....................     { 
....................         pulseX--; 
0E18:  DEC     08B0
0E1A:  BTSS.B  42.0
0E1C:  DEC     08B2
....................     } 
.................... } 
....................  
.................... // PIN_B7 
0E1E:  BCLR.B  86.4
0E20:  MOV     #1A,W0
0E22:  REPEAT  #C
0E24:  MOV     [--W15],[W0--]
0E26:  MOV     [--W15],W0
0E28:  POP     32
0E2A:  POP     36
0E2C:  POP     42
0E2E:  RETFIE  
.................... #INT_EXT0 
.................... void INT_EXT_INPUT2(void) 
0E30:  PUSH    42
0E32:  PUSH    36
0E34:  PUSH    32
0E36:  MOV     W0,[W15++]
0E38:  MOV     #2,W0
0E3A:  REPEAT  #C
0E3C:  MOV     [W0++],[W15++]
.................... { 
....................     if (input(PIN_B6) == 0) 
0E3E:  BSET.B  2C8.6
0E40:  BTSC.B  2CA.6
0E42:  BRA     E4C
....................     { 
....................         pulseY++; 
0E44:  INC     08B4
0E46:  BTSC.B  42.1
0E48:  INC     08B6
....................     } 
0E4A:  BRA     E52
....................     else 
....................     { 
....................         pulseY--; 
0E4C:  DEC     08B4
0E4E:  BTSS.B  42.0
0E50:  DEC     08B6
....................     } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use delay(internal = 8 MHz, clock = 32MHz) 
*
15B2:  CP0     W0
15B4:  BTSC.B  42.1
15B6:  BRA     15C0
15B8:  REPEAT  #3E7B
15BA:  NOP     
15BC:  DEC     W0,W0
15BE:  BRA     NZ,15B8
15C0:  RETURN  
.................... #PIN_SELECT U1RX = PIN_B12 // pin_b14 
.................... #PIN_SELECT U1TX = PIN_B13 // pin_b15 
....................  
.................... #use rs232(UART1, BAUD = 9600, XMIT = PIN_B13, RCV = PIN_B12, timeout = 500) 
*
0E64:  MOV     W5,[W15++]
0E66:  MOV     #640,W5
0E68:  REPEAT  #137E
0E6A:  NOP     
0E6C:  DEC     W5,W5
0E6E:  BRA     NZ,E76
0E70:  CLR     8B8
0E72:  MOV     #0,W0
0E74:  BRA     E82
0E76:  BTSS.B  222.0
0E78:  BRA     E68
0E7A:  PUSH    222
0E7C:  POP     8B8
0E7E:  MOV     226,W0
0E80:  BCLR.B  222.1
0E82:  MOV     [--W15],W5
0E84:  RETURN  
....................  
.................... #include "communication/print_form.h" 
.................... #ifndef PRINT_FORM 
*
0E52:  BCLR.B  84.0
0E54:  MOV     #1A,W0
0E56:  REPEAT  #C
0E58:  MOV     [--W15],[W0--]
0E5A:  MOV     [--W15],W0
0E5C:  POP     32
0E5E:  POP     36
0E60:  POP     42
0E62:  RETFIE  
.................... #define PRINT_FORM 
....................  
.................... void printFloat(float n) 
.................... { 
....................     int intpart = (int)n; 
....................     int decpart = (n - intpart) * 1000; 
....................     decpart = abs(decpart); 
....................     if (n < 0.0f) 
....................         printf("-%d.%d%d%d", abs(intpart), (decpart < 100) ? 0 : decpart / 100, (decpart < 10) ? 0 : (decpart / 10) % 10, decpart % 10); 
....................     else 
....................         printf("%d.%d%d%d", intpart, (decpart < 100) ? 0 : decpart / 100, (decpart < 10) ? 0 : (decpart / 10) % 10, decpart % 10); 
.................... } 
....................  
.................... // void printFloat(float n) 
.................... // { 
.................... //     char string[20]; 
.................... //     sprintf(string, "\f%6.3f", n); 
.................... //     printf("%s", string); 
.................... // } 
....................  
.................... #endif 
....................  
.................... #include "communication/protocol.h" 
.................... #ifndef PROTOCOL_H 
.................... #define PROTOCOL_H 
....................  
.................... #define BUFFER_SIZE 4 
.................... #define BUFFER_HEADER_SIZE 2 
....................  
.................... // read command 
.................... #define GO_HOME 0 
.................... #define X_POSITION 1 
.................... #define Y_POSITION 2 
.................... #define Z_POSITION 3 
.................... #define ROTATE 4 
.................... #define KEEP 5 
....................  
.................... // call response command 
.................... #define ERROR_DECODE 100 
.................... #define TASK_COMPLETE 101 
....................  
.................... typedef struct FeedBackProtocol 
.................... { 
....................     BOOLEAN goHome; 
....................     BOOLEAN xPosition; 
....................     BOOLEAN yPosition; 
....................     BOOLEAN zPosition; 
....................     BOOLEAN rotation; 
....................     BOOLEAN keeping; 
.................... } FeedProtocol; 
....................  
.................... FeedProtocol feedBack = {FALSE, FALSE, FALSE, FALSE, FALSE, FALSE}; 
.................... FeedProtocol firstFeedBack = {FALSE, FALSE, FALSE, FALSE, FALSE, FALSE}; 
....................  
.................... typedef struct DecodeData 
.................... { 
....................     uint8_t cmd; 
....................     int data1; 
.................... } decode_; 
....................  
.................... decode_ dataCom; 
....................  
.................... void sentData(uint8_t cmd, int data) 
*
1BEC:  MOV     W5,[W15++]
1BEE:  MOV     W6,[W15++]
.................... { 
....................     register uint8_t dataByte[2]; 
....................     dataByte[0] = (data >> 8) & 0xFF; 
1BF0:  MOV.B   917,W0L
1BF2:  MOV.B   W0L,W6L
1BF4:  CLR.B   D
1BF6:  MOV     W6,W5
....................     dataByte[1] = (data); 
1BF8:  MOV.B   916,W0L
1BFA:  MOV.B   W0L,B
....................  
....................     int chksum = 0; 
1BFC:  CLR     918
....................     for (int i = 0; i < 2; i++) 
1BFE:  CLR     91A
1C00:  MOV     91A,W4
1C02:  CP      W4,#2
1C04:  BRA     GE,1C1A
....................         chksum += dataByte[i]; 
1C06:  MOV     91A,W4
1C08:  ADD     W4,#A,W4
1C0A:  MOV     W4,W0
1C0C:  MOV     W0,W4
1C0E:  MOV.B   [W4],W0L
1C10:  ZE      W0,W0
1C12:  CLR.B   1
1C14:  ADD     918
1C16:  INC     091A
1C18:  BRA     1C00
....................     chksum = ~(chksum + cmd); 
1C1A:  MOV     914,W4
1C1C:  CLR.B   9
1C1E:  MOV     918,W3
1C20:  ADD     W3,W4,W0
1C22:  COM     W0,W0
1C24:  MOV     W0,918
....................  
....................     printf("%c", 0xFF); 
1C26:  BTSC.B  223.1
1C28:  BRA     1C26
1C2A:  MOV     #FF,W4
1C2C:  MOV     W4,224
....................     printf("%c", 0xFF); 
1C2E:  BTSC.B  223.1
1C30:  BRA     1C2E
1C32:  MOV     #FF,W4
1C34:  MOV     W4,224
....................     printf("%c", cmd); 
1C36:  BTSC.B  223.1
1C38:  BRA     1C36
1C3A:  MOV.B   914,W0L
1C3C:  MOV.B   W0L,224
1C3E:  CLR.B   225
....................     printf("%c", dataByte[0]); 
1C40:  BTSC.B  223.1
1C42:  BRA     1C40
1C44:  PUSH    224
1C46:  MOV.B   W5L,[W15-#2]
1C48:  POP     224
1C4A:  CLR.B   225
....................     printf("%c", dataByte[1]); 
1C4C:  BTSC.B  223.1
1C4E:  BRA     1C4C
1C50:  MOV.B   B,W0L
1C52:  MOV.B   W0L,224
1C54:  CLR.B   225
....................     printf("%c", (unsigned char)chksum); 
1C56:  BTSC.B  223.1
1C58:  BRA     1C56
1C5A:  MOV.B   918,W0L
1C5C:  MOV.B   W0L,224
1C5E:  CLR.B   225
1C60:  MOV     [--W15],W6
1C62:  MOV     [--W15],W5
1C64:  RETURN  
.................... } 
....................  
.................... decode_ decodePackage(uint8_t *data) 
*
1DFA:  MOV     W5,[W15++]
.................... { 
....................     decode_ code; 
....................     code.cmd = ERROR_DECODE; 
1DFC:  MOV.B   #64,W0L
1DFE:  MOV.B   W0L,916
....................  
....................     //checksum 
....................     int chksm = 0; 
1E00:  CLR     91A
....................     for (int numIndex = 0; numIndex < BUFFER_SIZE - 1; numIndex++) 
1E02:  CLR     91C
1E04:  MOV     91C,W4
1E06:  CP      W4,#3
1E08:  BRA     GE,1E18
....................         chksm += data[numIndex] & 0xff; 
1E0A:  MOV     91C,W0
1E0C:  ADD     914,W0
1E0E:  MOV.B   [W0],W0L
1E10:  AND     #FF,W0
1E12:  ADD     91A
1E14:  INC     091C
1E16:  BRA     1E04
....................     chksm = (~chksm) & 0xff; 
1E18:  COM     091A,W0
1E1A:  MOV     W0,W5
1E1C:  MOV     W5,W4
1E1E:  AND     #FF,W4
1E20:  MOV     W4,91A
....................  
....................     if (chksm != data[BUFFER_SIZE - 1]) 
1E22:  MOV     #3,W0
1E24:  ADD     914,W0
1E26:  MOV     W0,W4
1E28:  MOV.B   [W4],W0L
1E2A:  CLR.B   1
1E2C:  CP      91A
1E2E:  BRA     Z,1E36
....................         return code; 
1E30:  MOV     916,W0
1E32:  MOV     918,W1
1E34:  BRA     1E5C
....................  
....................     // happy part 
....................     code.cmd = data[0]; 
1E36:  MOV     #0,W0
1E38:  ADD     914,W0
1E3A:  MOV     916,W4
1E3C:  MOV.B   [W0+#0],W4L
1E3E:  MOV     W4,916
....................     code.data1 = (data[1] << 8) | data[2]; 
1E40:  MOV     #1,W0
1E42:  ADD     914,W0
1E44:  MOV.B   [W0],W0L
1E46:  MOV.B   W0L,B
1E48:  CLR.B   W5
1E4A:  MOV     #2,W0
1E4C:  ADD     914,W0
1E4E:  MOV     W0,W4
1E50:  MOV.B   [W4],W0L
1E52:  CLR.B   1
1E54:  IOR      W5,  W0,W0
1E56:  MOV     W0,918
....................     return code; 
1E58:  MOV     916,W0
1E5A:  MOV     918,W1
1E5C:  MOV     [--W15],W5
1E5E:  RETURN  
.................... } 
....................  
.................... int i = 0; 
.................... int countHeader = 0; 
.................... BOOLEAN isReady = false; 
.................... uint8_t data[BUFFER_SIZE]; 
....................  
.................... #INT_RDA 
.................... void readSerialData() 
*
0E86:  PUSH    42
0E88:  PUSH    36
0E8A:  PUSH    32
0E8C:  MOV     W0,[W15++]
0E8E:  MOV     #2,W0
0E90:  REPEAT  #C
0E92:  MOV     [W0++],[W15++]
0E94:  CALL    E64
0E98:  MOV.B   W0L,96E
.................... { 
....................     // receive data 
....................     uint8_t d = getc(); 
....................     // putc(d); 
....................     if (countHeader < 2) 
0E9A:  MOV     8C2,W4
0E9C:  CP      W4,#2
0E9E:  BRA     GE,EB6
....................     { 
....................         if ((d & 0xff) == 0xFF) 
0EA0:  MOV     96E,W5
0EA2:  AND     #FF,W5
0EA4:  MOV     #FF,W4
0EA6:  CP      W4,W5
0EA8:  BRA     NZ,EB2
....................             countHeader += 1; 
0EAA:  MOV     8C2,W4
0EAC:  ADD     W4,#1,W4
0EAE:  MOV     W4,8C2
0EB0:  BRA     EB4
....................         else 
....................             countHeader = 0; 
0EB2:  CLR     8C2
....................     } 
0EB4:  BRA     ED0
....................     else 
....................     { 
....................         data[i++] = d; 
0EB6:  MOV     8C0,W0
0EB8:  INC     08C0
0EBA:  MOV     W0,W5
0EBC:  MOV     #8C6,W4
0EBE:  ADD     W5,W4,W6
0EC0:  MOV     96E,W0
0EC2:  MOV.B   W0L,[W6+#0]
....................         if (i > (BUFFER_SIZE - 1)) 
0EC4:  MOV     8C0,W4
0EC6:  CP      W4,#3
0EC8:  BRA     LE,ED0
....................         { 
....................             i = 0; 
0ECA:  CLR     8C0
....................             countHeader = 0; 
0ECC:  CLR     8C2
....................             isReady = true; 
0ECE:  BSET.B  8C4.0
....................         } 
....................     } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "control/motor.h" 
.................... #ifndef MOTOR_H 
.................... #define MOTOR_H 
....................  
.................... #include "var.h" 
.................... #ifndef VAR_CONTROL 
.................... #define VAR_CONTROL 
....................  
.................... #define TIME_PERIOD_PWM 4000 
.................... #define TIME_D 0.01f 
....................  
.................... #define M_X 0 
.................... #define M_Y 1 
.................... #define M_Z 2 
....................  
.................... #define Kp_X 25f 
.................... #define Ki_X 0f 
.................... #define Kd_X 0f 
....................  
.................... #define Kp_Y 25f 
.................... #define Ki_Y 0f 
.................... #define Kd_Y 3f 
....................  
.................... // #define Kp_Z 
.................... // #define Ki_Z 
.................... // #define Kd_Z 
....................  
0ED0:  BCLR.B  85.3
0ED2:  MOV     #1A,W0
0ED4:  REPEAT  #C
0ED6:  MOV     [--W15],[W0--]
0ED8:  MOV     [--W15],W0
0EDA:  POP     32
0EDC:  POP     36
0EDE:  POP     42
0EE0:  RETFIE  
.................... #endif 
....................  
....................  
.................... void driveMotor(uint8_t motor, uint8_t dir, int speed); 
.................... void gotoXY(float x, float y); 
.................... long map(long x, long in_min, long in_max, long out_min, long out_max); 
.................... void pwmWrite(uint8_t motor, float duty); 
.................... long angleToPulse(int degree); 
....................  
.................... typedef struct ErrorControl 
.................... { 
....................     float err; 
....................     float sumErr; 
....................     float pError; 
....................     float outPID; 
.................... } errorControl; 
....................  
.................... typedef struct Coordinates 
.................... { 
....................     float x; 
....................     float y; 
....................     int z; 
.................... } Position; 
....................  
.................... typedef struct Gripper 
.................... { 
....................     int curAngle; 
....................     int error; 
....................     int setAngle; 
.................... } gripper; 
....................  
.................... gripper gripperRotate = {DEFAULT_ROTATE, 0, DEFAULT_ROTATE}; 
.................... gripper gripperKeep = {GRIPPER_OPEN, 0, GRIPPER_OPEN}; 
....................  
.................... errorControl errMotorX = {0f, 0f, 0f, 0f}; 
.................... errorControl errMotorY = {0f, 0f, 0f, 0f}; 
....................  
.................... Position curPos = {0.0, 0.0, 0}; 
.................... Position setPos = {0.0, 0.0, 0}; 
....................  
.................... long angleToPulse(int degree) 
*
1F68:  MOV     914,W0
1F6A:  CLR     W1
1F6C:  BTSC    W0.F
1F6E:  SETM    W1
1F70:  MOV     W0,916
1F72:  MOV     W1,918
.................... { 
....................     long pulse = degree; 
....................     if (pulse > 180) 
1F74:  MOV     918,W4
1F76:  CP      W4,#0
1F78:  BRA     LT,1F8C
1F7A:  BRA     GT,1F84
1F7C:  MOV     916,W4
1F7E:  MOV     #B4,W3
1F80:  CP      W3,W4
1F82:  BRA     C,1F8C
....................         pulse = 180; 
1F84:  MOV     #B4,W4
1F86:  MOV     W4,916
1F88:  CLR     918
1F8A:  BRA     1F9E
....................     else if (pulse < 0) 
1F8C:  MOV     918,W4
1F8E:  CP      W4,#0
1F90:  BRA     GT,1F9E
1F92:  BRA     LT,1F9A
1F94:  MOV     916,W4
1F96:  CP      W4,#0
1F98:  BRA     C,1F9E
....................         pulse = 0; 
1F9A:  CLR     916
1F9C:  CLR     918
....................     pulse = map(degree, 0, 180, 32, 127); 
1F9E:  PUSH    914
1FA0:  POP     91C
1FA2:  CLR     W4
1FA4:  BTSC.B  91D.7
1FA6:  SETM    W4
1FA8:  MOV     W4,91E
1FAA:  CLR     920
1FAC:  CLR     922
1FAE:  MOV     #B4,W4
1FB0:  MOV     W4,924
1FB2:  CLR     926
1FB4:  MOV     #20,W4
1FB6:  MOV     W4,928
1FB8:  CLR     92A
1FBA:  MOV     #7F,W4
1FBC:  MOV     W4,92C
1FBE:  CLR     92E
1FC0:  CALL    1D26
1FC4:  MOV     W0,916
1FC6:  MOV     W1,918
....................     return pulse; 
1FC8:  MOV     916,W0
1FCA:  MOV     918,W1
1FCC:  RETURN  
.................... } 
....................  
.................... void servoRotate(int pulse) 
.................... { 
....................     set_pwm_duty(3, pulse); 
*
15A6:  PUSH    910
15A8:  POP     18C
15AA:  RETURN  
.................... } 
....................  
.................... void servoKeep(int pulse) 
.................... { 
....................     set_pwm_duty(4, pulse); 
15AC:  PUSH    910
15AE:  POP     192
15B0:  RETURN  
.................... } 
....................  
.................... void driveMotor(uint8_t motor, uint8_t dir, int speed) 
*
1B08:  MOV     W5,[W15++]
1B0A:  MOV     W6,[W15++]
.................... { 
....................     switch (motor) 
1B0C:  MOV.B   916,W0L
1B0E:  CLR.B   1
1B10:  XOR     #0,W0
1B12:  BRA     Z,1B1E
1B14:  XOR     #1,W0
1B16:  BRA     Z,1B50
1B18:  XOR     #3,W0
1B1A:  BRA     Z,1B82
1B1C:  BRA     1BB4
....................     { 
....................     case M_X: 
....................         if (dir < 2) 
1B1E:  MOV     916,W4
1B20:  LSR     W4,#8,W4
1B22:  CP.B    W4L,#2
1B24:  BRA     C,1B46
....................         { 
....................             output_bit(DIR_M1_IN1, dir); 
1B26:  CP0.B   917
1B28:  BRA     NZ,1B2E
1B2A:  BCLR.B  2C4.2
1B2C:  BRA     1B30
1B2E:  BSET.B  2C4.2
1B30:  BCLR.B  2C0.2
....................             output_bit(DIR_M1_IN2, dir ^ 1); 
1B32:  MOV.B   917,W0L
1B34:  CLR.B   1
1B36:  BTG     W0.0
1B38:  CP0     W0
1B3A:  BRA     NZ,1B40
1B3C:  BCLR.B  2C4.4
1B3E:  BRA     1B42
1B40:  BSET.B  2C4.4
1B42:  BCLR.B  2C0.4
....................         } 
1B44:  BRA     1B4E
....................         else 
....................         { 
....................             output_bit(DIR_M1_IN1, 0); 
1B46:  BCLR.B  2C4.2
1B48:  BCLR.B  2C0.2
....................             output_bit(DIR_M1_IN2, 0); 
1B4A:  BCLR.B  2C4.4
1B4C:  BCLR.B  2C0.4
....................         } 
....................         break; 
1B4E:  BRA     1BB4
....................     case M_Y: 
....................         if (dir < 2) 
1B50:  MOV     916,W4
1B52:  LSR     W4,#8,W4
1B54:  CP.B    W4L,#2
1B56:  BRA     C,1B78
....................         { 
....................             output_bit(DIR_M2_IN1, dir); 
1B58:  CP0.B   917
1B5A:  BRA     NZ,1B60
1B5C:  BCLR.B  2CC.1
1B5E:  BRA     1B62
1B60:  BSET.B  2CC.1
1B62:  BCLR.B  2C8.1
....................             output_bit(DIR_M2_IN2, dir ^ 1); 
1B64:  MOV.B   917,W0L
1B66:  CLR.B   1
1B68:  BTG     W0.0
1B6A:  CP0     W0
1B6C:  BRA     NZ,1B72
1B6E:  BCLR.B  2CC.2
1B70:  BRA     1B74
1B72:  BSET.B  2CC.2
1B74:  BCLR.B  2C8.2
....................         } 
1B76:  BRA     1B80
....................         else 
....................         { 
....................             output_bit(DIR_M2_IN1, 0); 
1B78:  BCLR.B  2CC.1
1B7A:  BCLR.B  2C8.1
....................             output_bit(DIR_M2_IN2, 0); 
1B7C:  BCLR.B  2CC.2
1B7E:  BCLR.B  2C8.2
....................         } 
....................  
....................         break; 
1B80:  BRA     1BB4
....................  
....................     case M_Z: 
....................         if (dir < 2) 
1B82:  MOV     916,W4
1B84:  LSR     W4,#8,W4
1B86:  CP.B    W4L,#2
1B88:  BRA     C,1BAA
....................         { 
....................             output_bit(DIR_M3_IN1, dir); 
1B8A:  CP0.B   917
1B8C:  BRA     NZ,1B92
1B8E:  BCLR.B  2CD.0
1B90:  BRA     1B94
1B92:  BSET.B  2CD.0
1B94:  BCLR.B  2C9.0
....................             output_bit(DIR_M3_IN2, dir ^ 1); 
1B96:  MOV.B   917,W0L
1B98:  CLR.B   1
1B9A:  BTG     W0.0
1B9C:  CP0     W0
1B9E:  BRA     NZ,1BA4
1BA0:  BCLR.B  2CD.2
1BA2:  BRA     1BA6
1BA4:  BSET.B  2CD.2
1BA6:  BCLR.B  2C9.2
....................         } 
1BA8:  BRA     1BB2
....................         else 
....................         { 
....................             output_bit(DIR_M3_IN1, 0); 
1BAA:  BCLR.B  2CD.0
1BAC:  BCLR.B  2C9.0
....................             output_bit(DIR_M3_IN2, 0); 
1BAE:  BCLR.B  2CD.2
1BB0:  BCLR.B  2C9.2
....................         } 
....................         break; 
1BB2:  BRA     1BB4
....................     } 
....................     pwmWrite(motor, abs(speed)); 
1BB4:  MOV     918,W0
1BB6:  BTSS    W0.F
1BB8:  BRA     1BC0
1BBA:  MOV     #0,W4
1BBC:  MOV     918,W3
1BBE:  SUB     W4,W3,W0
1BC0:  PUSH    42
1BC2:  BCLR.B  81.7
1BC4:  SETM.B  42
1BC6:  BSET.B  81.7
1BC8:  CALL    EE2
1BCC:  BCLR.B  81.7
1BCE:  POP     42
1BD0:  BSET.B  81.7
1BD2:  MOV     W0,W5
1BD4:  MOV     W1,W6
1BD6:  MOV     W0,[W15++]
1BD8:  MOV.B   916,W0L
1BDA:  MOV.B   W0L,922
1BDC:  MOV     [--W15],W0
1BDE:  MOV     W5,924
1BE0:  MOV     W6,926
1BE2:  CALL    1A68
1BE6:  MOV     [--W15],W6
1BE8:  MOV     [--W15],W5
1BEA:  RETURN  
.................... } 
....................  
.................... void gotoXY(float x, float y) 
*
1338:  MOV     W5,[W15++]
133A:  MOV     W6,[W15++]
.................... { 
....................     errMotorX.err = x - curPos.x; 
133C:  BSET.B  43.0
133E:  MOV     966,W0
1340:  MOV     968,W1
1342:  MOV     8F6,W2
1344:  MOV     8F8,W3
1346:  CALL    118E
134A:  MOV     W0,8D6
134C:  MOV     W1,8D8
....................     errMotorY.err = y - curPos.y; 
134E:  BSET.B  43.0
1350:  MOV     96A,W0
1352:  MOV     96C,W1
1354:  MOV     8FA,W2
1356:  MOV     8FC,W3
1358:  CALL    118E
135C:  MOV     W0,8E6
135E:  MOV     W1,8E8
....................  
....................     errMotorX.sumErr += (errMotorX.err * TIME_D); 
1360:  MOV     8D6,W0
1362:  MOV     8D8,W1
1364:  MOV     #D70A,W2
1366:  MOV     #3C23,W3
1368:  CALL    FF6
136C:  BCLR.B  43.0
136E:  MOV     W0,W2
1370:  MOV     W1,W3
1372:  MOV     8DA,W0
1374:  MOV     8DC,W1
1376:  CALL    118E
137A:  MOV     W0,8DA
137C:  MOV     W1,8DC
....................     errMotorY.sumErr += (errMotorY.err * TIME_D); 
137E:  MOV     8E6,W0
1380:  MOV     8E8,W1
1382:  MOV     #D70A,W2
1384:  MOV     #3C23,W3
1386:  CALL    FF6
138A:  BCLR.B  43.0
138C:  MOV     W0,W2
138E:  MOV     W1,W3
1390:  MOV     8EA,W0
1392:  MOV     8EC,W1
1394:  CALL    118E
1398:  MOV     W0,8EA
139A:  MOV     W1,8EC
....................  
....................     float divX = (errMotorX.err - errMotorX.pError) / TIME_D; 
....................     float divY = (errMotorY.err - errMotorY.pError) / TIME_D; 
139C:  BSET.B  43.0
139E:  MOV     8D6,W0
13A0:  MOV     8D8,W1
13A2:  MOV     8DE,W2
13A4:  MOV     8E0,W3
13A6:  CALL    118E
13AA:  MOV     W0,W5
13AC:  MOV     W1,W6
13AE:  MOV     W5,W0
13B0:  MOV     W6,W1
13B2:  MOV     #D70A,W2
13B4:  MOV     #3C23,W3
13B6:  CALL    F2C
13BA:  MOV     W0,96E
13BC:  MOV     W1,970
13BE:  BSET.B  43.0
13C0:  MOV     8E6,W0
13C2:  MOV     8E8,W1
13C4:  MOV     8EE,W2
13C6:  MOV     8F0,W3
13C8:  CALL    118E
13CC:  MOV     W0,W5
13CE:  MOV     W1,W6
13D0:  MOV     W5,W0
13D2:  MOV     W6,W1
13D4:  MOV     #D70A,W2
13D6:  MOV     #3C23,W3
13D8:  CALL    F2C
13DC:  MOV     W0,972
13DE:  MOV     W1,974
....................  
....................     errMotorX.outPID = (Kp_X * errMotorX.err) + (Ki_X * errMotorX.sumErr) + (Kd_X * divX); 
13E0:  MOV     #0,W0
13E2:  MOV     #41C8,W1
13E4:  MOV     8D6,W2
13E6:  MOV     8D8,W3
13E8:  CALL    FF6
13EC:  MOV     W0,W5
13EE:  MOV     W1,W6
13F0:  MOV     #0,W0
13F2:  MOV     #0,W1
13F4:  MOV     8DA,W2
13F6:  MOV     8DC,W3
13F8:  CALL    FF6
13FC:  BCLR.B  43.0
13FE:  MOV     W0,W2
1400:  MOV     W1,W3
1402:  MOV     W5,W0
1404:  MOV     W6,W1
1406:  CALL    118E
140A:  MOV     W0,W5
140C:  MOV     W1,W6
140E:  MOV     #0,W0
1410:  MOV     #0,W1
1412:  MOV     96E,W2
1414:  MOV     970,W3
1416:  CALL    FF6
141A:  BCLR.B  43.0
141C:  MOV     W0,W2
141E:  MOV     W1,W3
1420:  MOV     W5,W0
1422:  MOV     W6,W1
1424:  CALL    118E
1428:  MOV     W0,8E2
142A:  MOV     W1,8E4
....................     errMotorY.outPID = (Kp_Y * errMotorY.err) + (Ki_Y * errMotorY.sumErr) + (Kd_Y * divY); 
142C:  MOV     #0,W0
142E:  MOV     #41C8,W1
1430:  MOV     8E6,W2
1432:  MOV     8E8,W3
1434:  CALL    FF6
1438:  MOV     W0,W5
143A:  MOV     W1,W6
143C:  MOV     #0,W0
143E:  MOV     #0,W1
1440:  MOV     8EA,W2
1442:  MOV     8EC,W3
1444:  CALL    FF6
1448:  BCLR.B  43.0
144A:  MOV     W0,W2
144C:  MOV     W1,W3
144E:  MOV     W5,W0
1450:  MOV     W6,W1
1452:  CALL    118E
1456:  MOV     W0,W5
1458:  MOV     W1,W6
145A:  MOV     #0,W0
145C:  MOV     #4040,W1
145E:  MOV     972,W2
1460:  MOV     974,W3
1462:  CALL    FF6
1466:  BCLR.B  43.0
1468:  MOV     W0,W2
146A:  MOV     W1,W3
146C:  MOV     W5,W0
146E:  MOV     W6,W1
1470:  CALL    118E
1474:  MOV     W0,8F2
1476:  MOV     W1,8F4
....................  
....................     errMotorX.pError = errMotorX.err; 
1478:  PUSH    8D6
147A:  POP     8DE
147C:  PUSH    8D8
147E:  POP     8E0
....................     errMotorY.pError = errMotorY.err; 
1480:  PUSH    8E6
1482:  POP     8EE
1484:  PUSH    8E8
1486:  POP     8F0
1488:  MOV     [--W15],W6
148A:  MOV     [--W15],W5
148C:  RETURN  
.................... } 
....................  
.................... long map(long x, long in_min, long in_max, long out_min, long out_max) 
*
1D26:  MOV     W5,[W15++]
1D28:  MOV     W6,[W15++]
.................... { 
....................     return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; 
1D2A:  MOV     91C,W4
1D2C:  MOV     920,W3
1D2E:  SUB     W4,W3,W5
1D30:  MOV     91E,W4
1D32:  MOV     922,W3
1D34:  SUBB    W4,W3,W6
1D36:  MOV     92C,W4
1D38:  MOV     928,W3
1D3A:  SUB     W4,W3,W0
1D3C:  MOV     92E,W4
1D3E:  MOV     92A,W3
1D40:  SUBB    W4,W3,W1
1D42:  MOV     W0,W2
1D44:  MOV     W1,W3
1D46:  MOV     W5,W0
1D48:  MOV     W6,W1
1D4A:  CALL    1C66
1D4E:  MOV     W0,W5
1D50:  MOV     W1,W6
1D52:  MOV     924,W4
1D54:  MOV     920,W3
1D56:  SUB     W4,W3,W0
1D58:  MOV     926,W4
1D5A:  MOV     922,W3
1D5C:  SUBB    W4,W3,W1
1D5E:  BCLR.B  43.0
1D60:  MOV     W0,W2
1D62:  MOV     W1,W3
1D64:  MOV     W5,W0
1D66:  MOV     W6,W1
1D68:  CALL    1CA8
1D6C:  MOV     W0,W5
1D6E:  MOV     W1,W6
1D70:  MOV     W5,W0
1D72:  ADD     928,W0
1D74:  MOV     92A,W4
1D76:  ADDC    W6,W4,W1
1D78:  MOV.D   W0,W0
1D7A:  MOV     [--W15],W6
1D7C:  MOV     [--W15],W5
1D7E:  RETURN  
.................... } 
....................  
.................... void pwmWrite(uint8_t motor, float duty) 
*
1A68:  MOV     W5,[W15++]
1A6A:  MOV     W6,[W15++]
.................... { 
....................     duty = (duty < 1) ? 0 : duty; 
1A6C:  MOV     924,W0
1A6E:  MOV     926,W1
1A70:  MOV     #0,W2
1A72:  MOV     #3F80,W3
1A74:  CALL    19C0
1A78:  BRA     NC,1A80
1A7A:  MOV     #0,W0
1A7C:  MOV     #0,W1
1A7E:  BRA     1A84
1A80:  MOV     924,W0
1A82:  MOV     926,W1
1A84:  MOV     W0,924
1A86:  MOV     W1,926
1A88:  PUSH    42
1A8A:  BCLR.B  81.7
1A8C:  SETM.B  42
1A8E:  BSET.B  81.7
....................     long duty_pwm = (duty / 100.0) * TIME_PERIOD_PWM; 
1A90:  MOV     924,W0
1A92:  MOV     926,W1
1A94:  MOV     #0,W2
1A96:  MOV     #42C8,W3
1A98:  CALL    F2C
1A9C:  BCLR.B  81.7
1A9E:  POP     42
1AA0:  BSET.B  81.7
1AA2:  MOV     W0,W5
1AA4:  MOV     W1,W6
1AA6:  PUSH    42
1AA8:  BCLR.B  81.7
1AAA:  SETM.B  42
1AAC:  BSET.B  81.7
1AAE:  MOV     W5,W0
1AB0:  MOV     W6,W1
1AB2:  MOV     #0,W2
1AB4:  MOV     #457A,W3
1AB6:  CALL    FF6
1ABA:  BCLR.B  81.7
1ABC:  POP     42
1ABE:  BSET.B  81.7
1AC0:  CALL    1A28
1AC4:  MOV     W0,928
1AC6:  MOV     W1,92A
....................  
....................     if (duty == 100) 
1AC8:  MOV     924,W0
1ACA:  MOV     926,W1
1ACC:  MOV     #0,W2
1ACE:  MOV     #42C8,W3
1AD0:  CALL    19C0
1AD4:  BRA     NZ,1AE2
....................     { 
....................         duty_pwm = duty_pwm + 1; 
1AD6:  MOV     928,W4
1AD8:  ADD     W4,#1,W4
1ADA:  MOV     W4,928
1ADC:  MOV     92A,W4
1ADE:  ADDC    W4,#0,W4
1AE0:  MOV     W4,92A
....................     } 
....................  
....................     switch (motor) 
1AE2:  MOV.B   922,W0L
1AE4:  CLR.B   1
1AE6:  XOR     #0,W0
1AE8:  BRA     Z,1AF4
1AEA:  XOR     #1,W0
1AEC:  BRA     Z,1AFA
1AEE:  XOR     #3,W0
1AF0:  BRA     Z,1B00
1AF2:  BRA     1B02
....................     { 
....................     case M_X: 
....................         set_pwm_duty(1, duty_pwm); 
1AF4:  PUSH    928
1AF6:  POP     180
....................         break; 
1AF8:  BRA     1B02
....................     case M_Y: 
....................         set_pwm_duty(2, duty_pwm); 
1AFA:  PUSH    928
1AFC:  POP     186
....................         break; 
1AFE:  BRA     1B02
....................     case M_Z: 
....................         // set_pwm_duty(3, duty_pwm); 
....................         break; 
1B00:  BRA     1B02
....................     } 
1B02:  MOV     [--W15],W6
1B04:  MOV     [--W15],W5
1B06:  RETURN  
.................... } 
....................  
.................... #endif 
....................  
.................... #include "control/position_control.h" 
.................... #ifndef POSITION_H 
.................... #define POSITION_H 
....................  
.................... BOOLEAN X_HOME = FALSE; 
.................... BOOLEAN Y_HOME = FALSE; 
.................... BOOLEAN Z_HOME = FALSE; 
....................  
.................... inline void servoControl() 
.................... { 
....................     gripperRotate.error = gripperRotate.setAngle - gripperRotate.curAngle; 
*
2150:  MOV     8CE,W4
2152:  MOV     8CA,W3
2154:  SUB     W4,W3,W0
2156:  MOV     W0,8CC
....................     gripperKeep.error = gripperKeep.setAngle - gripperKeep.curAngle; 
2158:  MOV     8D4,W4
215A:  MOV     8D0,W3
215C:  SUB     W4,W3,W0
215E:  MOV     W0,8D2
....................  
....................     gripperRotate.curAngle += (gripperRotate.error * 0.2); 
2160:  MOV     8CC,W0
2162:  CLR     W3
2164:  BTSC    W0.F
2166:  SETM    W3
2168:  MOV     W3,W1
216A:  MOV     W3,W2
216C:  CALL    1608
2170:  MOV     #999A,W4
2172:  MOV     #9999,W5
2174:  MOV     #9999,W6
2176:  MOV     #3FC9,W7
2178:  CALL    166C
217C:  MOV     W0,W5
217E:  MOV     W1,W6
2180:  MOV     W2,W7
2182:  MOV     W3,W8
2184:  MOV     8CA,W0
2186:  CLR     W3
2188:  BTSC    W0.F
218A:  SETM    W3
218C:  MOV     W3,W1
218E:  MOV     W3,W2
2190:  CALL    1608
2194:  BCLR.B  43.0
2196:  MOV     W5,[W15++]
2198:  MOV     W6,[W15++]
219A:  MOV     W7,[W15++]
219C:  MOV     W5,W4
219E:  MOV     W6,W5
21A0:  MOV     W7,W6
21A2:  MOV     W8,W7
21A4:  CALL    177C
21A8:  MOV     [--W15],W7
21AA:  MOV     [--W15],W6
21AC:  MOV     [--W15],W5
21AE:  CALL    196A
21B2:  MOV     W0,8CA
....................     gripperKeep.curAngle += (gripperKeep.error * 0.2); 
21B4:  MOV     8D2,W0
21B6:  CLR     W3
21B8:  BTSC    W0.F
21BA:  SETM    W3
21BC:  MOV     W3,W1
21BE:  MOV     W3,W2
21C0:  CALL    1608
21C4:  MOV     #999A,W4
21C6:  MOV     #9999,W5
21C8:  MOV     #9999,W6
21CA:  MOV     #3FC9,W7
21CC:  CALL    166C
21D0:  MOV     W0,W5
21D2:  MOV     W1,W6
21D4:  MOV     W2,W7
21D6:  MOV     W3,W8
21D8:  MOV     8D0,W0
21DA:  CLR     W3
21DC:  BTSC    W0.F
21DE:  SETM    W3
21E0:  MOV     W3,W1
21E2:  MOV     W3,W2
21E4:  CALL    1608
21E8:  BCLR.B  43.0
21EA:  MOV     W5,[W15++]
21EC:  MOV     W6,[W15++]
21EE:  MOV     W7,[W15++]
21F0:  MOV     W5,W4
21F2:  MOV     W6,W5
21F4:  MOV     W7,W6
21F6:  MOV     W8,W7
21F8:  CALL    177C
21FC:  MOV     [--W15],W7
21FE:  MOV     [--W15],W6
2200:  MOV     [--W15],W5
2202:  CALL    196A
2206:  MOV     W0,8D0
....................  
....................     gripperRotate.error = (abs(gripperRotate.error) > 1) ? gripperRotate.error : 0; 
2208:  MOV     8CC,W0
220A:  BTSS    W0.F
220C:  BRA     2214
220E:  MOV     #0,W4
2210:  MOV     8CC,W3
2212:  SUB     W4,W3,W0
2214:  MOV     W0,W5
2216:  CP      W5,#1
2218:  BRA     LE,221E
221A:  MOV     8CC,W0
221C:  BRA     2220
221E:  MOV     #0,W0
2220:  MOV     W0,8CC
....................     servoRotate(gripperRotate.curAngle); 
2222:  PUSH    8CA
2224:  POP     910
2226:  CALL    15A6
....................  
....................     gripperKeep.error = (abs(gripperKeep.error) > 1) ? gripperKeep.error : 0; 
222A:  MOV     8D2,W0
222C:  BTSS    W0.F
222E:  BRA     2236
2230:  MOV     #0,W4
2232:  MOV     8D2,W3
2234:  SUB     W4,W3,W0
2236:  MOV     W0,W5
2238:  CP      W5,#1
223A:  BRA     LE,2240
223C:  MOV     8D2,W0
223E:  BRA     2242
2240:  MOV     #0,W0
2242:  MOV     W0,8D2
....................     servoKeep(gripperKeep.curAngle); 
2244:  PUSH    8D0
2246:  POP     910
2248:  CALL    15AC
.................... } 
....................  
.................... inline void motorControl() 
*
2318:  MOV     #0,W0
231A:  MOV     #0,W1
231C:  MOV     8D6,W2
231E:  MOV     8D8,W3
2320:  CALL    19C0
2324:  BRA     NC,232A
2326:  MOV.B   #1,W0L
2328:  BRA     232C
232A:  CLR.B   W0
232C:  MOV.B   W0L,910
232E:  MOV     #0,W0
2330:  MOV     #0,W1
2332:  MOV     8E6,W2
2334:  MOV     8E8,W3
2336:  CALL    19C0
233A:  BRA     NC,2340
233C:  MOV.B   #1,W0L
233E:  BRA     2342
2340:  CLR.B   W0
2342:  MOV.B   W0L,911
.................... { 
....................     uint8_t dirX = (errMotorX.err > 0) ? GO_FORWARD : GO_BACKWARD; 
....................     uint8_t dirY = (errMotorY.err > 0) ? GO_FORWARD : GO_BACKWARD; 
....................  
....................     if (abs(errMotorX.err) > 2) 
2344:  MOV     8D6,W0
2346:  MOV     8D8,W1
2348:  BCLR    W1.F
234A:  MOV     W0,W5
234C:  MOV     W1,W6
234E:  MOV     #0,W0
2350:  MOV     #4000,W1
2352:  MOV     W5,W2
2354:  MOV     W6,W3
2356:  CALL    19C0
235A:  BRA     NC,23A6
....................     { 
....................         errMotorX.outPID = (errMotorX.outPID > 100) ? 100 : map(errMotorX.outPID, 0, 100, 50, 100); 
235C:  MOV     #0,W0
235E:  MOV     #42C8,W1
2360:  MOV     8E2,W2
2362:  MOV     8E4,W3
2364:  CALL    19C0
2368:  BRA     NC,2370
236A:  MOV     #0,W0
236C:  MOV     #42C8,W1
236E:  BRA     239E
2370:  MOV     8E2,W0
2372:  MOV     8E4,W1
2374:  CALL    1A28
2378:  MOV     W0,W5
237A:  MOV     W1,W6
237C:  MOV     W5,91C
237E:  MOV     W6,91E
2380:  CLR     920
2382:  CLR     922
2384:  MOV     #64,W4
2386:  MOV     W4,924
2388:  CLR     926
238A:  MOV     #32,W4
238C:  MOV     W4,928
238E:  CLR     92A
2390:  MOV     #64,W4
2392:  MOV     W4,92C
2394:  CLR     92E
2396:  CALL    1D26
239A:  CALL    1D80
239E:  MOV     W0,8E2
23A0:  MOV     W1,8E4
....................         firstFeedBack.xPosition = FALSE; 
23A2:  BCLR.B  8BB.1
....................     } 
23A4:  BRA     23C4
....................     else 
....................     { 
....................         if (feedBack.xPosition && !firstFeedBack.xPosition) 
23A6:  BTSS.B  8BA.1
23A8:  BRA     23BC
23AA:  BTSC.B  8BB.1
23AC:  BRA     23BC
....................         { 
....................             feedBack.xPosition = FALSE; 
23AE:  BCLR.B  8BA.1
....................             sentData(TASK_COMPLETE, X_POSITION); 
23B0:  MOV.B   #65,W0L
23B2:  MOV.B   W0L,914
23B4:  MOV     #1,W4
23B6:  MOV     W4,916
23B8:  CALL    1BEC
....................         } 
....................         dirX = GO_BREAK; 
23BC:  MOV.B   #2,W0L
23BE:  MOV.B   W0L,910
....................         errMotorX.outPID = 0; 
23C0:  CLR     8E2
23C2:  CLR     8E4
....................     } 
....................  
....................     if (abs(errMotorY.err) > 2) 
23C4:  MOV     8E6,W0
23C6:  MOV     8E8,W1
23C8:  BCLR    W1.F
23CA:  MOV     W0,W5
23CC:  MOV     W1,W6
23CE:  MOV     #0,W0
23D0:  MOV     #4000,W1
23D2:  MOV     W5,W2
23D4:  MOV     W6,W3
23D6:  CALL    19C0
23DA:  BRA     NC,2426
....................     { 
....................         errMotorY.outPID = (errMotorY.outPID > 100) ? 100 : map(errMotorY.outPID, 0, 100, 30, 100); 
23DC:  MOV     #0,W0
23DE:  MOV     #42C8,W1
23E0:  MOV     8F2,W2
23E2:  MOV     8F4,W3
23E4:  CALL    19C0
23E8:  BRA     NC,23F0
23EA:  MOV     #0,W0
23EC:  MOV     #42C8,W1
23EE:  BRA     241E
23F0:  MOV     8F2,W0
23F2:  MOV     8F4,W1
23F4:  CALL    1A28
23F8:  MOV     W0,W5
23FA:  MOV     W1,W6
23FC:  MOV     W5,91C
23FE:  MOV     W6,91E
2400:  CLR     920
2402:  CLR     922
2404:  MOV     #64,W4
2406:  MOV     W4,924
2408:  CLR     926
240A:  MOV     #1E,W4
240C:  MOV     W4,928
240E:  CLR     92A
2410:  MOV     #64,W4
2412:  MOV     W4,92C
2414:  CLR     92E
2416:  CALL    1D26
241A:  CALL    1D80
241E:  MOV     W0,8F2
2420:  MOV     W1,8F4
....................         firstFeedBack.yPosition = FALSE; 
2422:  BCLR.B  8BB.2
....................     } 
2424:  BRA     2444
....................     else 
....................     { 
....................         if (feedBack.yPosition && !firstFeedBack.yPosition) 
2426:  BTSS.B  8BA.2
2428:  BRA     243C
242A:  BTSC.B  8BB.2
242C:  BRA     243C
....................         { 
....................             feedBack.yPosition = FALSE; 
242E:  BCLR.B  8BA.2
....................             sentData(TASK_COMPLETE, Y_POSITION); 
2430:  MOV.B   #65,W0L
2432:  MOV.B   W0L,914
2434:  MOV     #2,W4
2436:  MOV     W4,916
2438:  CALL    1BEC
....................         } 
....................         dirY = GO_BREAK; 
243C:  MOV.B   #2,W0L
243E:  MOV.B   W0L,911
....................         errMotorY.outPID = 0; 
2440:  CLR     8F2
2442:  CLR     8F4
....................     } 
....................  
....................     driveMotor(M_X, dirX, errMotorX.outPID); 
2444:  MOV     8E2,W0
2446:  MOV     8E4,W1
2448:  CALL    1DCE
244C:  MOV     W0,W5
244E:  CLR.B   916
2450:  MOV     W0,[W15++]
2452:  MOV.B   910,W0L
2454:  MOV.B   W0L,917
2456:  MOV     [--W15],W0
2458:  MOV     W5,918
245A:  CALL    1B08
....................     driveMotor(M_Y, dirY, errMotorY.outPID); 
245E:  MOV     8F2,W0
2460:  MOV     8F4,W1
2462:  CALL    1DCE
2466:  MOV     W0,W5
2468:  MOV     W0,[W15++]
246A:  MOV.B   #1,W0L
246C:  MOV.B   W0L,916
246E:  MOV     [--W15],W0
2470:  MOV.B   911,W0L
2472:  MOV.B   W0L,917
2474:  MOV     W5,918
2476:  CALL    1B08
.................... } 
....................  
.................... inline void gotoHome() 
.................... { 
....................     if (X_HOME == FALSE) 
*
2252:  BTSC.B  8C4.1
2254:  BRA     2268
....................     { 
....................         driveMotor(M_X, GO_BACKWARD, 60); 
2256:  CLR.B   916
2258:  CLR.B   917
225A:  MOV     #3C,W4
225C:  MOV     W4,918
225E:  CALL    1B08
....................         pulseX = 0; 
2262:  CLR     8B0
2264:  CLR     8B2
....................     } 
2266:  BRA     2274
....................     else 
....................     { 
....................         driveMotor(M_X, GO_BREAK, 0); 
2268:  CLR.B   916
226A:  MOV.B   #2,W0L
226C:  MOV.B   W0L,917
226E:  CLR     918
2270:  CALL    1B08
....................     } 
....................  
....................     if (Y_HOME == FALSE) 
2274:  BTSC.B  8C4.2
2276:  BRA     228C
....................     { 
....................         driveMotor(M_Y, GO_BACKWARD, 60); 
2278:  MOV.B   #1,W0L
227A:  MOV.B   W0L,916
227C:  CLR.B   917
227E:  MOV     #3C,W4
2280:  MOV     W4,918
2282:  CALL    1B08
....................         pulseY = 0; 
2286:  CLR     8B4
2288:  CLR     8B6
....................     } 
228A:  BRA     229A
....................     else 
....................     { 
....................         driveMotor(M_Y, GO_BREAK, 0); 
228C:  MOV.B   #1,W0L
228E:  MOV.B   W0L,916
2290:  MOV.B   #2,W0L
2292:  MOV.B   W0L,917
2294:  CLR     918
2296:  CALL    1B08
....................     } 
....................  
....................     if (Z_HOME == FALSE) 
229A:  BTSC.B  8C4.3
229C:  BRA     22AE
....................     { 
....................         driveMotor(M_Z, GO_BACKWARD, 100); 
229E:  MOV.B   #2,W0L
22A0:  MOV.B   W0L,916
22A2:  CLR.B   917
22A4:  MOV     #64,W4
22A6:  MOV     W4,918
22A8:  CALL    1B08
....................     } 
22AC:  BRA     22BE
....................     else 
....................     { 
....................         driveMotor(M_Z, GO_BREAK, 0); 
22AE:  MOV.B   #2,W0L
22B0:  MOV.B   W0L,916
22B2:  MOV.B   #2,W0L
22B4:  MOV.B   W0L,917
22B6:  CLR     918
22B8:  CALL    1B08
....................         curPos.z = 0; 
22BC:  CLR     8FE
....................     } 
....................  
....................     if (Z_HOME && Y_HOME && X_HOME) 
22BE:  BTSS.B  8C4.3
22C0:  BRA     22DA
22C2:  BTSS.B  8C4.2
22C4:  BRA     22DA
22C6:  BTSS.B  8C4.1
22C8:  BRA     22DA
....................     { 
....................         if (feedBack.goHome) 
22CA:  BTSS.B  8BA.0
22CC:  BRA     22DA
....................         { 
....................             feedBack.goHome = FALSE; 
22CE:  BCLR.B  8BA.0
....................             sentData(TASK_COMPLETE, GO_HOME); 
22D0:  MOV.B   #65,W0L
22D2:  MOV.B   W0L,914
22D4:  CLR     916
22D6:  CALL    1BEC
....................         } 
....................     } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void setupPwm(); 
.................... void setupHardware(); 
.................... inline void verifyLimitSwitch(); 
.................... inline void onDataReceive(); 
.................... inline void onDetectLine(); 
....................  
.................... volatile long pulseX = 0; 
.................... volatile long pulseY = 0; 
.................... int directZ = GO_FORWARD; 
....................  
.................... #INT_TIMER1 
.................... void TIMER1_isr(void) 
*
148E:  PUSH    42
1490:  PUSH    36
1492:  PUSH    32
1494:  MOV     W0,[W15++]
1496:  MOV     #2,W0
1498:  REPEAT  #C
149A:  MOV     [W0++],[W15++]
.................... { 
....................     curPos.x = distance(pulseX); 
149C:  MOV     8B0,W5
149E:  MOV     W5,972
14A0:  CALL    1100
14A4:  CALL    114A
14A8:  MOV     W1,8F6
14AA:  MOV     W2,8F8
....................     curPos.y = distance(pulseY); 
14AC:  MOV     8B4,W5
14AE:  MOV     W5,972
14B0:  CALL    1100
14B4:  CALL    114A
14B8:  MOV     W1,8FA
14BA:  MOV     W2,8FC
....................  
....................     gotoXY(setPos.x, setPos.y); 
14BC:  PUSH    900
14BE:  POP     966
14C0:  PUSH    902
14C2:  POP     968
14C4:  PUSH    904
14C6:  POP     96A
14C8:  PUSH    906
14CA:  POP     96C
14CC:  CALL    1338
....................     // onDetectLine(); 
.................... } 
....................  
14D0:  BCLR.B  84.3
14D2:  MOV     #1A,W0
14D4:  REPEAT  #C
14D6:  MOV     [--W15],[W0--]
14D8:  MOV     [--W15],W0
14DA:  POP     32
14DC:  POP     36
14DE:  POP     42
14E0:  RETFIE  
.................... #INT_TIMER3 
.................... void TIMER3_isr(void) 
14E2:  PUSH    42
14E4:  PUSH    36
14E6:  PUSH    32
14E8:  MOV     W0,[W15++]
14EA:  MOV     #2,W0
14EC:  REPEAT  #C
14EE:  MOV     [W0++],[W15++]
.................... { 
....................     onDetectLine(); 
*
1546:  BCLR.B  85.0
1548:  MOV     #1A,W0
154A:  REPEAT  #C
154C:  MOV     [--W15],[W0--]
154E:  MOV     [--W15],W0
1550:  POP     32
1552:  POP     36
1554:  POP     42
1556:  RETFIE  
.................... } 
.................... void main(void) 
*
1FCE:  MOV     #2780,W15
1FD0:  MOV     #27FF,W0
1FD2:  MOV     W0,20
1FD4:  NOP     
1FD6:  MOV     #4444,W0
1FD8:  MOV     W0,A4
1FDA:  MOV     #4444,W0
1FDC:  MOV     W0,A8
1FDE:  BSET.B  81.7
1FE0:  MOV     #46,W0
1FE2:  MOV.B   W0L,742
1FE4:  MOV     #57,W0
1FE6:  MOV.B   W0L,742
1FE8:  BCLR.B  742.6
1FEA:  MOV     #43F,W0
1FEC:  MOV     W0,680
1FEE:  MOV     #3F0C,W0
1FF0:  MOV     W0,6A4
1FF2:  MOV     #12,W0
1FF4:  MOV     W0,6C0
1FF6:  MOV     #1300,W0
1FF8:  MOV     W0,6C2
1FFA:  MOV     #300,W0
1FFC:  MOV     W0,6CC
1FFE:  MOV     #1514,W0
2000:  MOV     W0,6CE
2002:  MOV     #46,W0
2004:  MOV.B   W0L,742
2006:  MOV     #57,W0
2008:  MOV.B   W0L,742
200A:  BSET.B  742.6
200C:  CLR     744
200E:  CLR     8B8
2010:  MOV     #8000,W4
2012:  MOV     W4,220
2014:  MOV     #400,W4
2016:  MOV     W4,222
2018:  BSET.B  220.3
201A:  MOV     #1A0,W4
201C:  MOV     W4,228
201E:  CLR     8C0
2020:  CLR     8C2
2022:  BCLR.B  8C4.0
2024:  BCLR.B  8C4.1
2026:  BCLR.B  8C4.2
2028:  BCLR.B  8C4.3
202A:  CLR     8B0
202C:  CLR     8B2
202E:  CLR     8B4
2030:  CLR     8B6
2032:  MOV     #1,W4
2034:  MOV     W4,90A
2036:  BCLR.B  8C4.4
2038:  SETM    32C
203A:  BRA     20E0
203C:  DATA    C0,06,08
203E:  DATA    00,00,00
2040:  DATA    4B,F0,3F
2042:  DATA    5C,0A,58
2044:  DATA    F6,3B,8F
2046:  DATA    00,C0,3C
2048:  DATA    8B,28,AC
204A:  DATA    3C,BE,F6
204C:  DATA    3F,D2,D5
204E:  DATA    44,16,8C
2050:  DATA    15,D7,BF
2052:  DATA    69,00,5A
2054:  DATA    2E,1B,87
2056:  DATA    99,3F,9A
2058:  DATA    5F,AD,4B
205A:  DATA    91,E4,01
205C:  DATA    C0,5D,11
205E:  DATA    2F,92,E4
2060:  DATA    81,FB,3F
2062:  DATA    38,DA,91
2064:  DATA    80,9D,C5
2066:  DATA    E0,BF,6F
2068:  DATA    12,C0,B4
206A:  DATA    C3,09,AB
206C:  DATA    3F,6B,C1
206E:  DATA    03,4E,C1
2070:  DATA    B5,45,BF
2072:  DATA    F7,40,05
2074:  DATA    FF,00,5A
2076:  DATA    EF,3F,F3
2078:  DATA    A3,E2,F7
207A:  DATA    D7,FF,01
207C:  DATA    40,C0,B4
207E:  DATA    FF,05,3C
2080:  DATA    58,FC,3F
2082:  DATA    3B,D3,C0
2084:  DATA    B5,BA,8C
2086:  DATA    E2,3F,39
2088:  DATA    D3,C7,3D
208A:  DATA    41,79,B2
208C:  DATA    3F,87,0D
208E:  DATA    3C,50,D0
2090:  DATA    AF,62,3F
2092:  DATA    30,4B,8D
2094:  DATA    A2,82,AA
2096:  DATA    04,40,09
2098:  DATA    A0,40,4A
209A:  DATA    05,76,03
209C:  DATA    40,EC,9E
209E:  DATA    37,88,A6
20A0:  DATA    44,F0,3F
20A2:  DATA    8F,12,8D
20A4:  DATA    29,9A,5B
20A6:  DATA    C7,3F,0E
20A8:  DATA    E0,80,7C
20AA:  DATA    A1,D8,86
20AC:  DATA    3F,29,4B
20AE:  DATA    FB,95,C2
20B0:  DATA    37,1A,3F
20B2:  DATA    80,02,08
20B4:  DATA    BA,00,00
20B6:  DATA    80,0B,08
20B8:  DATA    CA,7F,00
20BA:  DATA    00,00,7F
20BC:  DATA    00,64,00
20BE:  DATA    00,00,64
20C0:  DATA    40,35,00
20C2:  DATA    00,00,00
20C4:  INC     W2,W2
20C6:  CP      W2,#1
20C8:  BRA     NZ,20D2
20CA:  TBLRDL  [W1],W3
20CC:  TBLRDH  [W1++],W4
20CE:  MOV.B   6,W0L
20D0:  RETURN  
20D2:  CP      W2,#2
20D4:  BRA     NZ,20DA
20D6:  MOV.B   7,W0L
20D8:  RETURN  
20DA:  MOV.B   8,W0L
20DC:  CLR     W2
20DE:  RETURN  
20E0:  MOV     #0,W6
20E2:  MOV     #0,W0
20E4:  MOV     W0,32
20E6:  MOV     #203C,W0
20E8:  MOV     W0,W1
20EA:  CLR     W2
20EC:  CALL    20C4
20F0:  MOV.B   W0L,B
20F2:  CALL    20C4
20F6:  MOV.B   W0L,A
20F8:  CP0     W5
20FA:  BRA     Z,212E
20FC:  BTSS    W5.F
20FE:  BRA     210E
2100:  CALL    20C4
2104:  MOV.B   W0L,D
2106:  CALL    20C4
210A:  MOV.B   W0L,C
210C:  BCLR    W5.F
210E:  BTSS    W5.E
2110:  BRA     2122
2112:  BCLR    W5.E
2114:  DEC     W5,W5
2116:  CALL    20C4
211A:  MOV.B   W0L,W7L
211C:  REPEAT  W5
211E:  MOV.B   W7L,[W6++]
2120:  BRA     20EC
2122:  CALL    20C4
2126:  MOV.B   W0L,[W6++]
2128:  DEC     W5,W5
212A:  BRA     NZ,2122
212C:  BRA     20EC
.................... { 
....................     setupHardware(); 
212E:  CALL    15C2
....................     delay_ms(50); 
2132:  MOV     #32,W0
2134:  CALL    15B2
....................  
....................     while (TRUE) 
....................     { 
....................         long now4 = get_timer4(); 
2138:  MOV     114,W0
213A:  MOV     #0,W1
213C:  MOV     W0,90C
213E:  MOV     W1,90E
....................         // update data to pc 
....................         if (now4 > 625) 
2140:  MOV     90E,W4
2142:  CP      W4,#0
2144:  BRA     LT,224E
2146:  BRA     GT,2150
2148:  MOV     90C,W4
214A:  MOV     #271,W3
214C:  CP      W3,W4
214E:  BRA     C,224E
....................         { 
....................             // printf("curPos.z %d , setPos.z %d\n", curPos.z, setPos.z); 
....................             servoControl(); 
....................             set_timer4(0); 
*
224C:  CLR     114
....................         } 
....................  
....................         if (dataCom.cmd == GO_HOME) 
224E:  CP0.B   8BC
2250:  BRA     NZ,22DC
....................         { 
....................             gotoHome(); 
....................         } 
*
22DA:  BRA     247A
....................         else 
....................         { 
....................             if (curPos.z == setPos.z) 
22DC:  MOV     8FE,W0
22DE:  CP      908
22E0:  BRA     NZ,2308
....................             { 
....................                 driveMotor(M_Z, GO_BREAK, 0); 
22E2:  MOV.B   #2,W0L
22E4:  MOV.B   W0L,916
22E6:  MOV.B   #2,W0L
22E8:  MOV.B   W0L,917
22EA:  CLR     918
22EC:  CALL    1B08
....................                 if (feedBack.zPosition && !firstFeedBack.zPosition) 
22F0:  BTSS.B  8BA.3
22F2:  BRA     2306
22F4:  BTSC.B  8BB.3
22F6:  BRA     2306
....................                 { 
....................                     feedBack.zPosition = FALSE; 
22F8:  BCLR.B  8BA.3
....................                     sentData(TASK_COMPLETE, Z_POSITION); 
22FA:  MOV.B   #65,W0L
22FC:  MOV.B   W0L,914
22FE:  MOV     #3,W4
2300:  MOV     W4,916
2302:  CALL    1BEC
....................                 } 
....................             } 
2306:  BRA     2318
....................             else 
....................             { 
....................                 driveMotor(M_Z, directZ, 0); 
2308:  MOV.B   #2,W0L
230A:  MOV.B   W0L,916
230C:  MOV.B   90A,W0L
230E:  MOV.B   W0L,917
2310:  CLR     918
2312:  CALL    1B08
....................                 firstFeedBack.zPosition = FALSE; 
2316:  BCLR.B  8BB.3
....................             } 
....................  
....................             motorControl(); // control motor via PID Feedback control 
....................         } 
....................  
....................         // verify limit switch for set home 
....................         verifyLimitSwitch(); 
....................         // handle when receive data from serial 
....................         onDataReceive(); 
*
268A:  BRA     2138
....................     } 
.................... } 
....................  
268C:  PWRSAV  #0
.................... void setupHardware() 
.................... { 
....................  
....................     set_tris_a(0b10100); 
*
15C2:  MOV     #14,W4
15C4:  MOV     W4,2C0
....................     set_tris_b(0b0011001011110000); 
15C6:  MOV     #32F0,W4
15C8:  MOV     W4,2C8
....................     disable_interrupts(GLOBAL); 
15CA:  BCLR.B  81.7
15CC:  MOV     #E0,W4
15CE:  MOV     W4,42
15D0:  BSET.B  81.7
....................     initTimer(); 
15D2:  CALL    1558
....................     setupPwm(); 
15D6:  CALL    157C
....................     setSerialInterrupt(); 
15DA:  CALL    1598
....................     setupEncoderInterrupt(); 
15DE:  CALL    159C
....................     enable_interrupts(global); 
15E2:  BCLR.B  81.7
15E4:  CLR     42
15E6:  BSET.B  81.7
....................  
....................     dataCom.cmd = GO_HOME; 
15E8:  CLR.B   8BC
....................     X_HOME = FALSE; 
15EA:  BCLR.B  8C4.1
....................     Y_HOME = FALSE; 
15EC:  BCLR.B  8C4.2
....................     Z_HOME = FALSE; 
15EE:  BCLR.B  8C4.3
....................  
....................     servoRotate(DEFAULT_ROTATE); 
15F0:  MOV     #7F,W4
15F2:  MOV     W4,910
15F4:  CALL    15A6
....................     servoKeep(GRIPPER_OPEN); 
15F8:  MOV     #64,W4
15FA:  MOV     W4,910
15FC:  CALL    15AC
....................     delay_ms(2000); 
1600:  MOV     #7D0,W0
1602:  CALL    15B2
1606:  RETURN  
....................     // driveMotor(M_Z, 0, 0); 
.................... } 
....................  
.................... void setupPwm() 
.................... { 
....................     setup_timer2(TMR_INTERNAL | TMR_DIV_BY_8, TIME_PERIOD_PWM); 
*
157C:  CLR     110
157E:  MOV     #FA0,W4
1580:  MOV     W4,10C
1582:  MOV     #8010,W4
1584:  MOV     W4,110
....................     setup_compare(1, COMPARE_PWM | COMPARE_TIMER2); 
1586:  MOV     #6,W4
1588:  MOV     W4,184
....................     setup_compare(2, COMPARE_PWM | COMPARE_TIMER2); 
158A:  MOV     #6,W4
158C:  MOV     W4,18A
....................     // enable_interrupts(INT_TIMER2); 
....................  
....................     setup_compare(3, COMPARE_PWM | COMPARE_TIMER3); 
158E:  MOV     #E,W4
1590:  MOV     W4,190
....................     setup_compare(4, COMPARE_PWM | COMPARE_TIMER3); 
1592:  MOV     #E,W4
1594:  MOV     W4,196
1596:  RETURN  
.................... } 
....................  
.................... inline void verifyLimitSwitch() 
.................... { 
....................     if (input(SWITCH_X) == 0) 
*
247A:  BSET.B  2C0.0
247C:  BTSC.B  2C2.0
247E:  BRA     2482
....................         X_HOME = TRUE; 
2480:  BSET.B  8C4.1
....................  
....................     if (input(SWITCH_Y) == 0) 
2482:  BSET.B  2C0.1
2484:  BTSC.B  2C2.1
2486:  BRA     248A
....................         Y_HOME = TRUE; 
2488:  BSET.B  8C4.2
....................  
....................     if (input(SWITCH_Z) == 0) 
248A:  BSET.B  2C9.3
248C:  BTSC.B  2CB.3
248E:  BRA     2492
....................         Z_HOME = TRUE; 
2490:  BSET.B  8C4.3
.................... } 
....................  
.................... BOOLEAN checkTime = FALSE; 
.................... inline void onDetectLine() 
.................... { 
....................     if (input(PIN_B9) == 0) 
*
14F0:  BSET.B  2C9.1
14F2:  BTSC.B  2CB.1
14F4:  BRA     1544
....................     { 
....................         if (checkTime == FALSE) 
14F6:  BTSC.B  8C4.4
14F8:  BRA     1542
....................         { 
....................             checkTime = TRUE; 
14FA:  BSET.B  8C4.4
....................             if (directZ == GO_FORWARD) 
14FC:  MOV     90A,W4
14FE:  CP      W4,#1
1500:  BRA     NZ,1524
....................             { 
....................                 if (curPos.z >= setPos.z) 
1502:  MOV     908,W0
1504:  MOV     8FE,W4
1506:  CP      W4,W0
1508:  BRA     LT,1510
....................                     curPos.z = setPos.z; 
150A:  PUSH    908
150C:  POP     8FE
150E:  BRA     1522
....................                 else 
....................                     curPos.z = (curPos.z > 5) ? 5 : curPos.z + 1; 
1510:  MOV     8FE,W4
1512:  CP      W4,#5
1514:  BRA     LE,151A
1516:  MOV     #5,W0
1518:  BRA     1520
151A:  MOV     8FE,W4
151C:  ADD     W4,#1,W4
151E:  MOV     W4,W0
1520:  MOV     W0,8FE
....................             } 
1522:  BRA     1542
....................             else 
....................             { 
....................                 if (curPos.z <= setPos.z) 
1524:  MOV     8FE,W0
1526:  MOV     908,W4
1528:  CP      W4,W0
152A:  BRA     LT,1532
....................                     curPos.z = setPos.z; 
152C:  PUSH    908
152E:  POP     8FE
1530:  BRA     1542
....................                 else 
....................                     curPos.z = (curPos.z < 1) ? 1 : curPos.z - 1; 
1532:  MOV     8FE,W4
1534:  CP      W4,#1
1536:  BRA     GE,153C
1538:  MOV     #1,W0
153A:  BRA     1540
153C:  MOV     8FE,W4
153E:  SUB     W4,#1,W0
1540:  MOV     W0,8FE
....................             } 
....................         } 
....................     } 
1542:  BRA     1546
....................     else 
....................     { 
....................         checkTime = FALSE; 
1544:  BCLR.B  8C4.4
....................     } 
.................... } 
....................  
.................... inline void onDataReceive() 
.................... { 
....................     if (isReady) 
*
2492:  BTSS.B  8C4.0
2494:  BRA     268A
....................     { 
....................         isReady = false; 
2496:  BCLR.B  8C4.0
....................         dataCom = decodePackage(data); 
2498:  MOV     #8C6,W4
249A:  MOV     W4,914
249C:  CALL    1DFA
24A0:  MOV     W0,8BC
24A2:  MOV     W1,8BE
....................         float buff = dataCom.data1 / 100.0f; 
24A4:  MOV     8BE,W0
24A6:  CLR     W3
24A8:  BTSC    W0.F
24AA:  SETM    W3
24AC:  MOV     W3,W1
24AE:  MOV     W3,W2
24B0:  CALL    1608
24B4:  MOV     #0,W4
24B6:  MOV     #0,W5
24B8:  MOV     #0,W6
24BA:  MOV     #4059,W7
24BC:  CALL    1E60
24C0:  CALL    114A
24C4:  MOV     W1,910
24C6:  MOV     W2,912
....................  
....................         switch (dataCom.cmd) 
24C8:  MOV.B   8BC,W0L
24CA:  CLR.B   1
24CC:  XOR     #0,W0
24CE:  BRA     Z,24E6
24D0:  XOR     #1,W0
24D2:  BRA     Z,2508
24D4:  XOR     #3,W0
24D6:  BRA     Z,258C
24D8:  XOR     #1,W0
24DA:  BRA     Z,2610
24DC:  XOR     #7,W0
24DE:  BRA     Z,2640
24E0:  XOR     #1,W0
24E2:  BRA     Z,265C
24E4:  BRA     267E
....................         { 
....................         case GO_HOME: 
....................             feedBack.goHome = TRUE; 
24E6:  BSET.B  8BA.0
....................             firstFeedBack.goHome = TRUE; 
24E8:  BSET.B  8BB.0
....................             X_HOME = FALSE; 
24EA:  BCLR.B  8C4.1
....................             Y_HOME = FALSE; 
24EC:  BCLR.B  8C4.2
....................             Z_HOME = FALSE; 
24EE:  BCLR.B  8C4.3
....................             setPos.x = 0.0; 
24F0:  CLR     900
24F2:  CLR     902
....................             setPos.y = 0.0; 
24F4:  CLR     904
24F6:  CLR     906
....................             setPos.z = 0; 
24F8:  CLR     908
....................             directZ = GO_FORWARD; 
24FA:  MOV     #1,W4
24FC:  MOV     W4,90A
....................             gripperRotate.setAngle = DEFAULT_ROTATE; 
24FE:  MOV     #7F,W4
2500:  MOV     W4,8CE
....................             gripperKeep.setAngle = GRIPPER_OPEN; 
2502:  MOV     #64,W4
2504:  MOV     W4,8D4
....................             break; 
2506:  BRA     268A
....................  
....................         case X_POSITION: 
....................             // do something when get SET_POSITION command 
....................             feedBack.xPosition = TRUE; 
2508:  BSET.B  8BA.1
....................             firstFeedBack.xPosition = TRUE; 
250A:  BSET.B  8BB.1
....................  
....................             if (setPos.x == buff) 
250C:  MOV     900,W0
250E:  MOV     902,W1
2510:  MOV     910,W2
2512:  MOV     912,W3
2514:  CALL    19C0
2518:  BRA     NZ,2526
....................                 sentData(TASK_COMPLETE, X_POSITION); 
251A:  MOV.B   #65,W0L
251C:  MOV.B   W0L,914
251E:  MOV     #1,W4
2520:  MOV     W4,916
2522:  CALL    1BEC
....................  
....................             setPos.x = buff; 
2526:  PUSH    910
2528:  POP     900
252A:  PUSH    912
252C:  POP     902
....................             setPos.x = (setPos.x > MAX_WORK_SPACE_X) ? MAX_WORK_SPACE_X : (setPos.y < MIN_WORK_SPACE_X) ? MIN_WORK_SPACE_X : setPos.x; 
252E:  MOV     #0,W0
2530:  MOV     #4387,W1
2532:  MOV     900,W2
2534:  MOV     902,W3
2536:  CALL    19C0
253A:  BRA     NC,2542
253C:  MOV     #0,W0
253E:  MOV     #4387,W1
2540:  BRA     255A
2542:  MOV     904,W0
2544:  MOV     906,W1
2546:  MOV     #0,W2
2548:  MOV     #41A0,W3
254A:  CALL    19C0
254E:  BRA     NC,2556
2550:  MOV     #0,W0
2552:  MOV     #41A0,W1
2554:  BRA     255A
2556:  MOV     900,W0
2558:  MOV     902,W1
255A:  MOV     W0,900
255C:  MOV     W1,902
....................  
....................             // reset PID 
....................             errMotorX.err = 0f; 
255E:  CLR     8D6
2560:  CLR     8D8
....................             errMotorX.outPID = 0f; 
2562:  CLR     8E2
2564:  CLR     8E4
....................             errMotorX.sumErr = 0f; 
2566:  CLR     8DA
2568:  CLR     8DC
....................             errMotorX.pError = setPos.x - curPos.x; 
256A:  BSET.B  43.0
256C:  PUSH    42
256E:  BCLR.B  81.7
2570:  SETM.B  42
2572:  BSET.B  81.7
2574:  MOV     900,W0
2576:  MOV     902,W1
2578:  MOV     8F6,W2
257A:  MOV     8F8,W3
257C:  CALL    118E
2580:  BCLR.B  81.7
2582:  POP     42
2584:  BSET.B  81.7
2586:  MOV     W0,8DE
2588:  MOV     W1,8E0
....................  
....................             // firstFeedBack.goHome = FALSE; 
....................             break; 
258A:  BRA     268A
....................  
....................         case Y_POSITION: 
....................             // do something when get ROTATE command 
....................             feedBack.yPosition = TRUE; 
258C:  BSET.B  8BA.2
....................             firstFeedBack.yPosition = TRUE; 
258E:  BSET.B  8BB.2
....................  
....................             if (setPos.y == buff) 
2590:  MOV     904,W0
2592:  MOV     906,W1
2594:  MOV     910,W2
2596:  MOV     912,W3
2598:  CALL    19C0
259C:  BRA     NZ,25AA
....................                 sentData(TASK_COMPLETE, Y_POSITION); 
259E:  MOV.B   #65,W0L
25A0:  MOV.B   W0L,914
25A2:  MOV     #2,W4
25A4:  MOV     W4,916
25A6:  CALL    1BEC
....................  
....................             setPos.y = buff; 
25AA:  PUSH    910
25AC:  POP     904
25AE:  PUSH    912
25B0:  POP     906
....................             setPos.y = (setPos.y > MAX_WORK_SPACE_Y) ? MAX_WORK_SPACE_Y : (setPos.y < MIN_WORK_SPACE_Y) ? MIN_WORK_SPACE_Y : setPos.y; 
25B2:  MOV     #0,W0
25B4:  MOV     #4396,W1
25B6:  MOV     904,W2
25B8:  MOV     906,W3
25BA:  CALL    19C0
25BE:  BRA     NC,25C6
25C0:  MOV     #0,W0
25C2:  MOV     #4396,W1
25C4:  BRA     25DE
25C6:  MOV     904,W0
25C8:  MOV     906,W1
25CA:  MOV     #0,W2
25CC:  MOV     #41A0,W3
25CE:  CALL    19C0
25D2:  BRA     NC,25DA
25D4:  MOV     #0,W0
25D6:  MOV     #41A0,W1
25D8:  BRA     25DE
25DA:  MOV     904,W0
25DC:  MOV     906,W1
25DE:  MOV     W0,904
25E0:  MOV     W1,906
....................  
....................              
....................             // reset PID 
....................             errMotorY.err = 0f; 
25E2:  CLR     8E6
25E4:  CLR     8E8
....................             errMotorY.outPID = 0f; 
25E6:  CLR     8F2
25E8:  CLR     8F4
....................             errMotorY.sumErr = 0; 
25EA:  CLR     8EA
25EC:  CLR     8EC
....................             errMotorY.pError = setPos.y - curPos.y; 
25EE:  BSET.B  43.0
25F0:  PUSH    42
25F2:  BCLR.B  81.7
25F4:  SETM.B  42
25F6:  BSET.B  81.7
25F8:  MOV     904,W0
25FA:  MOV     906,W1
25FC:  MOV     8FA,W2
25FE:  MOV     8FC,W3
2600:  CALL    118E
2604:  BCLR.B  81.7
2606:  POP     42
2608:  BSET.B  81.7
260A:  MOV     W0,8EE
260C:  MOV     W1,8F0
....................  
....................             // firstFeedBack.goHome = FALSE; 
....................             break; 
260E:  BRA     268A
....................  
....................         case Z_POSITION: 
....................             // do something when get KEEP command 
....................             feedBack.zPosition = TRUE; 
2610:  BSET.B  8BA.3
....................             firstFeedBack.zPosition = TRUE; 
2612:  BSET.B  8BB.3
....................             setPos.z = dataCom.data1; 
2614:  PUSH    8BE
2616:  POP     908
....................  
....................             if (setPos.z > 5) 
2618:  MOV     908,W4
261A:  CP      W4,#5
261C:  BRA     LE,2624
....................                 setPos.z = 5; 
261E:  MOV     #5,W4
2620:  MOV     W4,908
2622:  BRA     262E
....................             else if (setPos.z < 1) 
2624:  MOV     908,W4
2626:  CP      W4,#1
2628:  BRA     GE,262E
....................                 setPos.z = 1; 
262A:  MOV     #1,W4
262C:  MOV     W4,908
....................  
....................             if (setPos.z > curPos.z) 
262E:  MOV     8FE,W0
2630:  MOV     908,W4
2632:  CP      W4,W0
2634:  BRA     LE,263C
....................                 directZ = GO_FORWARD; 
2636:  MOV     #1,W4
2638:  MOV     W4,90A
263A:  BRA     263E
....................             else 
....................                 directZ = GO_BACKWARD; 
263C:  CLR     90A
....................  
....................             // firstFeedBack.goHome = FALSE; 
....................             break; 
263E:  BRA     268A
....................  
....................         case ROTATE: 
....................             // do something when get Z_POSITION command 
....................             feedBack.rotation = TRUE; 
2640:  BSET.B  8BA.4
....................             firstFeedBack.rotation = TRUE; 
2642:  BSET.B  8BB.4
....................             gripperRotate.setAngle = angleToPulse(dataCom.data1); 
2644:  PUSH    8BE
2646:  POP     914
2648:  CALL    1F68
264C:  MOV     W0,8CE
....................  
....................             sentData(TASK_COMPLETE, ROTATE); 
264E:  MOV.B   #65,W0L
2650:  MOV.B   W0L,914
2652:  MOV     #4,W4
2654:  MOV     W4,916
2656:  CALL    1BEC
....................  
....................             // firstFeedBack.goHome = FALSE; 
....................             break; 
265A:  BRA     268A
....................  
....................         case KEEP: 
....................             feedBack.keeping = TRUE; 
265C:  BSET.B  8BA.5
....................             firstFeedBack.keeping = TRUE; 
265E:  BSET.B  8BB.5
....................             if (dataCom.data1 == 1) 
2660:  MOV     8BE,W4
2662:  CP      W4,#1
2664:  BRA     NZ,266C
....................                 gripperKeep.setAngle = DEFAULT_KEEP; 
2666:  MOV     #85,W4
2668:  MOV     W4,8D4
266A:  BRA     2670
....................             else 
....................                 gripperKeep.setAngle = GRIPPER_OPEN; 
266C:  MOV     #64,W4
266E:  MOV     W4,8D4
....................  
....................             sentData(TASK_COMPLETE, KEEP); 
2670:  MOV.B   #65,W0L
2672:  MOV.B   W0L,914
2674:  MOV     #5,W4
2676:  MOV     W4,916
2678:  CALL    1BEC
....................  
....................             // firstFeedBack.goHome = FALSE; 
....................             break; 
267C:  BRA     268A
....................  
....................         default: 
....................             // do something when get ERROR_DECODE command 
....................             sentData(ERROR_DECODE, 0); 
267E:  MOV.B   #64,W0L
2680:  MOV.B   W0L,914
2682:  CLR     916
2684:  CALL    1BEC
....................             break; 
2688:  BRA     268A
....................         } 
....................     } 
.................... } 

Configuration Fuses:
   Word  1L: 3F7F   WPOSTS16 WDT128 WINDIS NOWDT ICSP1 NODEBUG NOWRT NOPROTECT NOJTAG
          H: FF00  
   Word  2L: F9F7   NOPR NOALTI2C1 IOL1WAY NOOSCIO FRC_PLL SOSC_SEC WUT_DEFAULT IESO
          H: FF00  
